/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import com.toedter.calendar.JTextFieldDateEditor;
import modelo.ComboItem;
import controladores.ControladorPrincipal;
import java.awt.Font;
import java.awt.event.ItemEvent;

import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.JLabelAriel;

/**
 *
 * @author ari_0
 */
public class PanelPlanillaNueva extends JPanelCustom {

    private DefaultTableModel tablaReparaciones, modeloPagos;
    ControladorPrincipal controlador;
  //  RestrictedTextField montoCheque, montoContado;
    ItemListener itemListennerCli, itemListennerVh, itemListennerPersona;
    private String nombre, apellido, apodo;
    private int itemVh = 0;  //contador para que el ActionPerformed perzonalido de Vh no se ejecute dos veces
    private int itemPer = 0;  //contador para que el ActionPerformed perzonalido de persona no se ejecute dos veces
    private int idCliente = 0; //El id de cliente que se va a guardar

    public PanelPlanillaNueva() {
//--------------------------------------
        prepararModelosTablas(); //Prepara las tablas con sus respectivos encabezados de columna
        initComponents();
        controlador = ControladorPrincipal.getInstancia();
        cosasParaIniciarEnComun(); //Algunas variables de las vistas y el controlador
        //Este método va acá porque difiere de la planilla a modificar
        cargarPersonas("0"); // El 0 representa el id de la persona: como no tiene id va 0
        this.jComboBoxPersona.setSelectedIndex(1);
        paraIniciarPlanillaNueva(); //Para planillas Nuevas
        // guardarPlanilla();
    }

    public PanelPlanillaNueva(int numero) { //Constructor para planillas a modificar por eso tiene numero
        //Número que representa el idplanilla, usado en la vista "Ver planillas" para cuando se quiera modificar una
        //Por esto algunas funciones desaparecen "setVisible(false)"
        //   tablaReparaciones = new DefaultTableModel();
        prepararModelosTablas();
        initComponents();
        controlador = ControladorPrincipal.getInstancia();
        cosasParaPlanillaAModificar(numero);
        cosasParaIniciarEnComun();
    }

    private void cosasParaIniciarEnComun() {
        this.jTableReparaciones.getColumnModel().getColumn(0).setPreferredWidth(450);
        this.jFrameContado.setLocationRelativeTo(null);
        this.jFrameCheque.setLocationRelativeTo(null);
        desactivoEdicionTextFieldDeDateChooser();
        this.jTableReparaciones.getColumnModel().getColumn(0).setMinWidth(60);
        this.jTableReparaciones.getColumnModel().getColumn(0).setMaxWidth(70);
        this.jTableReparaciones.getColumnModel().getColumn(1).setMinWidth(770);
        this.jTableReparaciones.getColumnModel().getColumn(1).setMaxWidth(1170);
        this.jTableReparaciones.getColumnModel().getColumn(2).setMinWidth(140);
        this.jTableReparaciones.getColumnModel().getColumn(2).setMaxWidth(175);
        this.jTableReparaciones.getColumnModel().getColumn(3).setMinWidth(100);
        this.jTableReparaciones.getColumnModel().getColumn(3).setMaxWidth(175);
        //----------------
        this.jTablePagos.getTableHeader().setFont(new Font("SansSerif", Font.PLAIN, 18));
        this.jTableReparaciones.getTableHeader().setFont(new Font("SansSerif", Font.PLAIN, 18));
    }

    private void desactivoEdicionTextFieldDeDateChooser() {
        JTextFieldDateEditor editor = (JTextFieldDateEditor) this.jDateChooserEntrada.getDateEditor();
        editor.setEditable(false);
        editor = (JTextFieldDateEditor) this.jDateChooserSalida.getDateEditor();
        editor.setEditable(false);
    }

    private String[] getColumnas() {
        String columna[] = new String[]{"ID", "Reparación", "tipo", "Importe", "Finalizada"};
        return columna;
    }

    private String[] getColumnasPagos() {
        String columna[] = new String[]{"id", "tipo", "monto", "¿cobrado?"};
        return columna;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrameContado = new javax.swing.JFrame();
        jButtonAgregarContado = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jTextFieldMontoContado = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jDateChooserContado = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jRadioButtonNuevoPago = new javax.swing.JRadioButton();
        jLabel23 = new javax.swing.JLabel();
        jLabelId = new javax.swing.JLabel();
        jLabelIdPago = new javax.swing.JLabel();
        jFrameCheque = new javax.swing.JFrame();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldMontoCheque = new javax.swing.JTextField();
        jButtonAgregarCheque = new javax.swing.JButton();
        jButtonCancelarCheque = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldNCheque = new javax.swing.JTextField();
        jDateChooserChCobro = new com.toedter.calendar.JDateChooser();
        jDateChooserChEmision = new com.toedter.calendar.JDateChooser();
        jCheckBoxChCobrado = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        jCheckBoxChequeNuevo = new javax.swing.JCheckBox();
        jLabelIdCheque = new javax.swing.JLabel();

        jCheckBoxNotificarCh = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        jLabelIdCheque1 = new javax.swing.JLabel();
        jFrameEstadoPagos = new javax.swing.JFrame();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldImporteTotal = new javax.swing.JTextField();
        jTextFieldCC = new javax.swing.JTextField();
        jButtonAceptarDeudas = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldMontoPagado = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jTextFieldACobrar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonGroupNPago = new javax.swing.ButtonGroup();
        jFrameInfo = new javax.swing.JFrame();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        jLabelFechaPl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableReparaciones = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelNumPlanilla = new javax.swing.JLabel();
        jButtonAdRep = new javax.swing.JButton();
        jButtonQuitar = new javax.swing.JButton();
        jLabelVh = new javax.swing.JLabel();
        jComboBoxVh = new javax.swing.JComboBox<>();
        jLabelFPatente = new javax.swing.JLabel();
        jTextFieldFPatente = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldDescripcion = new javax.swing.JTextField();
        jButtonPagoContado = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonGuardar = new javax.swing.JButton();
        jButtonFVh = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jButtonVerPago = new javax.swing.JButton();
        jCheckBoxPagado = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jDateChooserSalida = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePagos = new javax.swing.JTable();
        jCheckBoxFacturado = new javax.swing.JCheckBox();
        jButtonPagoCheque = new javax.swing.JButton();
        jFrameDeudaPlanilla = new javax.swing.JButton();
        jLabelChofer = new javax.swing.JLabel();
        jComboBoxPersona = new javax.swing.JComboBox<>();
        jTextFieldFPersona = new javax.swing.JTextField();
        jLabelNombreApodo = new javax.swing.JLabel();
        jButtonFPer = new javax.swing.JButton();
        jLabelCliente = new javax.swing.JLabel();
        jTextFieldDueñoCliente = new javax.swing.JTextField();
        jDateChooserEntrada = new com.toedter.calendar.JDateChooser();
        jButtonBorrarPago = new javax.swing.JButton();
        jButtonModifRep = new javax.swing.JButton();
        jCheckBoxNotificar = new javax.swing.JCheckBox();
        jButtonInfo = new javax.swing.JButton();
        jCheckBoxEntregado = new javax.swing.JCheckBox();

        jFrameContado.setAlwaysOnTop(true);
        jFrameContado.setLocationByPlatform(true);
        jFrameContado.setResizable(false);
        jFrameContado.setSize(new java.awt.Dimension(435, 265));
        jFrameContado.setType(java.awt.Window.Type.POPUP);

        jButtonAgregarContado.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonAgregarContado.setText("Agregar");
        jButtonAgregarContado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarContadoActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jTextFieldMontoContado.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel6.setText("Monto del pago:");

        jDateChooserContado.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel7.setText("Fecha:");

        buttonGroupNPago.add(jRadioButtonNuevoPago);
        jRadioButtonNuevoPago.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButtonNuevoPago.setText("Nuevo Pago");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel23.setText("A Modificar o Nuevo:");

        jLabelId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelId.setText("idPago:");

        jLabelIdPago.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelIdPago.setText("??");

        javax.swing.GroupLayout jFrameContadoLayout = new javax.swing.GroupLayout(jFrameContado.getContentPane());
        jFrameContado.getContentPane().setLayout(jFrameContadoLayout);
        jFrameContadoLayout.setHorizontalGroup(
            jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameContadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameContadoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAgregarContado))
                    .addGroup(jFrameContadoLayout.createSequentialGroup()
                        .addGroup(jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel23)
                            .addComponent(jLabelId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelIdPago)
                            .addGroup(jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldMontoContado, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jDateChooserContado, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jRadioButtonNuevoPago, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jFrameContadoLayout.setVerticalGroup(
            jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameContadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonNuevoPago)
                    .addComponent(jLabel23))
                .addGap(18, 18, 18)
                .addGroup(jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelId)
                    .addComponent(jLabelIdPago))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jFrameContadoLayout.createSequentialGroup()
                        .addGroup(jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldMontoContado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooserContado, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jFrameContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAgregarContado)
                    .addComponent(jButtonCancelar))
                .addContainerGap())
        );

        jFrameCheque.setResizable(false);
        jFrameCheque.setSize(new java.awt.Dimension(575, 467));
        jFrameCheque.setType(java.awt.Window.Type.POPUP);

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel8.setText("Fecha de Cobro:");

        jLabel11.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel11.setText("Fecha de Emisión:");

        jLabel12.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel12.setText("Monto:");

        jTextFieldMontoCheque.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jButtonAgregarCheque.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonAgregarCheque.setText("Agregar");
        jButtonAgregarCheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarChequeActionPerformed(evt);
            }
        });

        jButtonCancelarCheque.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonCancelarCheque.setText("Cancelar");
        jButtonCancelarCheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarChequeActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel13.setText("Número de Cheque:");

        jTextFieldNCheque.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jDateChooserChCobro.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N

        jDateChooserChEmision.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N

        jCheckBoxChCobrado.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jCheckBoxChCobrado.setText("Cobrado");

        jLabel14.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel14.setText("Para indicar si el cheque fue acreditado:");

        jCheckBoxChequeNuevo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBoxChequeNuevo.setText("Cheque Nuevo");

        jLabelIdCheque.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelIdCheque.setText("idCheque");

        jCheckBoxNotificarCh.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jCheckBoxNotificarCh.setText("Notificar");
        this.jCheckBoxNotificarCh.setSelected(true);

        jLabel18.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 0, 0));
        jLabel18.setText("<html><p>¡Atención! - Si desmarca esta casilla <br> no recibirá avisos para cobrar el cheque</p></html>");

        jLabelIdCheque1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelIdCheque1.setText("Este dato no es obligatorio");

        javax.swing.GroupLayout jFrameChequeLayout = new javax.swing.GroupLayout(jFrameCheque.getContentPane());
        jFrameCheque.getContentPane().setLayout(jFrameChequeLayout);
        jFrameChequeLayout.setHorizontalGroup(
            jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameChequeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jFrameChequeLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCancelarCheque)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAgregarCheque))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrameChequeLayout.createSequentialGroup()
                        .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrameChequeLayout.createSequentialGroup()
                                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrameChequeLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(123, 123, 123)
                                        .addComponent(jTextFieldMontoCheque))
                                    .addGroup(jFrameChequeLayout.createSequentialGroup()
                                        .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jFrameChequeLayout.createSequentialGroup()
                                                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel8)
                                                    .addComponent(jLabel11))
                                                .addGap(18, 18, 18))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrameChequeLayout.createSequentialGroup()
                                                .addComponent(jLabelIdCheque)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                        .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jDateChooserChEmision, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jDateChooserChCobro, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCheckBoxChequeNuevo))))
                                .addGap(18, 18, 18)
                                .addComponent(jLabelIdCheque1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrameChequeLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldNCheque, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrameChequeLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxChCobrado))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrameChequeLayout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBoxNotificarCh)))
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jFrameChequeLayout.setVerticalGroup(
            jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameChequeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxChequeNuevo)
                    .addComponent(jLabelIdCheque))
                .addGap(18, 18, 18)
                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jDateChooserChCobro, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIdCheque1))
                .addGap(18, 18, 18)
                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooserChEmision, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextFieldMontoCheque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextFieldNCheque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxChCobrado)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxNotificarCh)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 32, Short.MAX_VALUE)
                .addGroup(jFrameChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAgregarCheque)
                    .addComponent(jButtonCancelarCheque))
                .addContainerGap())
        );

        jFrameEstadoPagos.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jFrameEstadoPagos.setLocationByPlatform(true);
        jFrameEstadoPagos.setResizable(false);
        jFrameEstadoPagos.setSize(new java.awt.Dimension(740, 435));
        jFrameEstadoPagos.setType(java.awt.Window.Type.POPUP);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Importe Total Reparaciones:");
        jLabel15.setMaximumSize(new java.awt.Dimension(404, 450));
        jLabel15.setMinimumSize(new java.awt.Dimension(224, 250));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("Cantidad que debe el Cliente:");

        jTextFieldImporteTotal.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jTextFieldCC.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jButtonAceptarDeudas.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonAceptarDeudas.setText("Aceptar");
        jButtonAceptarDeudas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptarDeudasActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel19.setText("Total recibido:");
        jLabel19.setMaximumSize(new java.awt.Dimension(404, 450));
        jLabel19.setMinimumSize(new java.awt.Dimension(224, 250));

        jTextFieldMontoPagado.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel22.setText("Monto a Cobrar (Cheques):");

        jTextFieldACobrar.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Información acerca de los importes y pagos");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("*El \"Total Recibido\" incluye los cheques que aún no fueron cobrados");

        javax.swing.GroupLayout jFrameEstadoPagosLayout = new javax.swing.GroupLayout(jFrameEstadoPagos.getContentPane());
        jFrameEstadoPagos.getContentPane().setLayout(jFrameEstadoPagosLayout);
        jFrameEstadoPagosLayout.setHorizontalGroup(
            jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameEstadoPagosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameEstadoPagosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonAceptarDeudas))
                    .addGroup(jFrameEstadoPagosLayout.createSequentialGroup()
                        .addGroup(jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addGap(36, 36, 36)
                        .addGroup(jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldACobrar)
                            .addComponent(jTextFieldImporteTotal)
                            .addComponent(jTextFieldMontoPagado)
                            .addComponent(jTextFieldCC))))
                .addContainerGap())
            .addGroup(jFrameEstadoPagosLayout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addComponent(jLabel1)
                .addContainerGap(249, Short.MAX_VALUE))
            .addGroup(jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jFrameEstadoPagosLayout.createSequentialGroup()
                    .addGap(33, 33, 33)
                    .addComponent(jLabel3)
                    .addContainerGap(206, Short.MAX_VALUE)))
        );
        jFrameEstadoPagosLayout.setVerticalGroup(
            jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameEstadoPagosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(24, 24, 24)
                .addGroup(jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldImporteTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldMontoPagado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextFieldCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jTextFieldACobrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(jButtonAceptarDeudas)
                .addContainerGap())
            .addGroup(jFrameEstadoPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameEstadoPagosLayout.createSequentialGroup()
                    .addContainerGap(278, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addGap(58, 58, 58)))
        );

        jFrameInfo.setAlwaysOnTop(true);
        jFrameInfo.setLocationByPlatform(true);
        jFrameInfo.setResizable(false);
        jFrameInfo.setSize(new java.awt.Dimension(770, 385));
        jFrameInfo.setType(java.awt.Window.Type.POPUP);

        jLabel24.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel24.setText("Esta vista es la principal del sistema. Desde la misma se administra la siguiente información:");

        jLabel25.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel25.setText("* Importe total de las reparaciones");

        jLabel26.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel26.setText("* Fechas de llegada y Fecha de Facturado");

        jLabel27.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel27.setText("* Reparaciones realizadas a un vehículo ");

        jLabel28.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel28.setText("* Administración de pagos. (Cheques y pagos al contado).");

        jLabel29.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 0, 51));
        jLabel29.setText("* Es la vista que le da sentido a todo el sistema. Desde acá surge toda la información.");

        jButton1.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel30.setText("* Atributo \"Notificar\": Permite elegir si se quieren recibir notificaciones de la planilla.");

        javax.swing.GroupLayout jFrameInfoLayout = new javax.swing.GroupLayout(jFrameInfo.getContentPane());
        jFrameInfo.getContentPane().setLayout(jFrameInfoLayout);
        jFrameInfoLayout.setHorizontalGroup(
            jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameInfoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jFrameInfoLayout.createSequentialGroup()
                        .addGroup(jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27)
                            .addComponent(jLabel25)
                            .addComponent(jLabel29)
                            .addComponent(jLabel28)
                            .addComponent(jLabel30))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jFrameInfoLayout.setVerticalGroup(
            jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addGap(18, 18, 18)
                .addComponent(jLabel27)
                .addGap(18, 18, 18)
                .addComponent(jLabel25)
                .addGap(18, 18, 18)
                .addComponent(jLabel28)
                .addGap(18, 18, 18)
                .addComponent(jLabel30)
                .addGap(18, 18, 18)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(27, 27, 27))
        );

        jLabelFechaPl.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelFechaPl.setText("Fecha Entrada:");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(0, 0));

        jTableReparaciones.setAutoCreateRowSorter(true);
        jTableReparaciones.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 16)); // NOI18N
        jTableReparaciones.setModel(tablaReparaciones);
        jTableReparaciones.setRowHeight(22);
        jScrollPane1.setViewportView(jTableReparaciones);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel2.setText("Reparaciones ▼");

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel4.setText("Planilla N°:");

        jLabelNumPlanilla.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelNumPlanilla.setText("000000");

        jButtonAdRep.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonAdRep.setText("Agregar Rep.");
        jButtonAdRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdRepActionPerformed(evt);
            }
        });

        jButtonQuitar.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonQuitar.setText("Quitar Rep.");
        jButtonQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitarActionPerformed(evt);
            }
        });

        jLabelVh.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelVh.setText("Camión:");

        jComboBoxVh.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N

        jLabelFPatente.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelFPatente.setText("Filtrar por Marca:");

        jTextFieldFPatente.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jTextFieldFPatente.setToolTipText("ABC123CD ó ABC123");

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel9.setText("Descripción:");

        jTextFieldDescripcion.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jButtonPagoContado.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonPagoContado.setText("Agregar Pago Contado");
        jButtonPagoContado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPagoContadoActionPerformed(evt);
            }
        });

        jButtonCancel.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonCancel.setText("Cancelar");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonGuardar.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonFVh.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonFVh.setText("Filtrar");
        //this.jButtonFVh.setEnabled(false);
        jButtonFVh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFVhActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel10.setText("Pagos:");

        jButtonVerPago.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonVerPago.setText("Ver Pago");
        jButtonVerPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerPagoActionPerformed(evt);
            }
        });

        jCheckBoxPagado.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jCheckBoxPagado.setText("Planilla Paga");

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel5.setText("Fecha:");

        jDateChooserSalida.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        jDateChooserSalida.setMinimumSize(new java.awt.Dimension(155, 27));

        jScrollPane2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jTablePagos.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 16)); // NOI18N
        jTablePagos.setModel(modeloPagos);
        jTablePagos.setRowHeight(22);
        jScrollPane2.setViewportView(jTablePagos);

        jCheckBoxFacturado.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jCheckBoxFacturado.setText("Facturado");
        jCheckBoxFacturado.setToolTipText("Cuando se activa empieza la Cuenta Corriente");
        jCheckBoxFacturado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFacturadoActionPerformed(evt);
            }
        });

        jButtonPagoCheque.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonPagoCheque.setText("Agregar Cheque");
        jButtonPagoCheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPagoChequeActionPerformed(evt);
            }
        });

        jFrameDeudaPlanilla.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jFrameDeudaPlanilla.setText("Balance de la Planilla");
        jFrameDeudaPlanilla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFrameDeudaPlanillaActionPerformed(evt);
            }
        });

        jLabelChofer.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelChofer.setText("Traído por:");

        jComboBoxPersona.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N

        jTextFieldFPersona.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jLabelNombreApodo.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelNombreApodo.setText("Filtrar por Nombre o Apodo:");

        jButtonFPer.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonFPer.setText("Filtrar");
        jButtonFPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFPerActionPerformed(evt);
            }
        });

        jLabelCliente.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelCliente.setText("Dueño:");

        jTextFieldDueñoCliente.setEditable(false);
        jTextFieldDueñoCliente.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jTextFieldDueñoCliente.setDisabledTextColor(new java.awt.Color(51, 51, 51));

        jDateChooserEntrada.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        jDateChooserEntrada.setMinimumSize(new java.awt.Dimension(155, 27));

        jButtonBorrarPago.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonBorrarPago.setText("Borrar");
        jButtonBorrarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarPagoActionPerformed(evt);
            }
        });

        jButtonModifRep.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonModifRep.setText("Modificar Rep.");
        jButtonModifRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifRepActionPerformed(evt);
            }
        });

        jCheckBoxNotificar.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jCheckBoxNotificar.setText("Notificar");
        jCheckBoxNotificar.setToolTipText("Notifica cuando la Planilla esta impaga.");
        this.jCheckBoxNotificar.setSelected(true);

        jButtonInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/info-icon2.png"))); // NOI18N
        jButtonInfo.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/info-icon2.png"))); // NOI18N
        jButtonInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInfoActionPerformed(evt);
            }
        });

        jCheckBoxEntregado.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jCheckBoxEntregado.setText("<html><p>Veh&iacute;culo</p><p>&nbsp;Entregado</p></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelNumPlanilla)
                .addGap(25, 25, 25)
                .addComponent(jCheckBoxFacturado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateChooserSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelFechaPl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateChooserEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxNotificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)
                        .addGap(78, 78, 78)
                        .addComponent(jLabelChofer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxPersona, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelNombreApodo)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldFPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonFPer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel9)
                        .addGap(10, 10, 10)
                        .addComponent(jTextFieldDescripcion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAdRep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonModifRep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonQuitar))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelVh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxVh, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelFPatente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldFPatente, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonFVh)
                        .addGap(26, 26, 26)
                        .addComponent(jLabelCliente)
                        .addGap(6, 6, 6)
                        .addComponent(jTextFieldDueñoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel10))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jButtonBorrarPago)))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCheckBoxPagado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxEntregado, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonVerPago)
                                .addGap(6, 6, 6)
                                .addComponent(jButtonPagoContado)
                                .addGap(6, 6, 6)
                                .addComponent(jButtonPagoCheque)
                                .addGap(10, 10, 10)
                                .addComponent(jFrameDeudaPlanilla)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                                .addComponent(jButtonCancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonGuardar)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelNumPlanilla)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jCheckBoxFacturado))
                                .addComponent(jDateChooserSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jCheckBoxNotificar)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(3, 3, 3)
                                            .addComponent(jLabelFechaPl))
                                        .addComponent(jDateChooserEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(jButtonInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelVh)
                    .addComponent(jComboBoxVh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFPatente)
                    .addComponent(jTextFieldFPatente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFVh)
                    .addComponent(jLabelCliente)
                    .addComponent(jTextFieldDueñoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelChofer)
                        .addComponent(jLabelNombreApodo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldFPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonFPer))))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAdRep)
                            .addComponent(jButtonQuitar)
                            .addComponent(jButtonModifRep))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonBorrarPago))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxPagado)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBoxEntregado)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonVerPago)
                    .addComponent(jFrameDeudaPlanilla)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonGuardar)
                        .addComponent(jButtonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonPagoContado)
                            .addComponent(jButtonPagoCheque)))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void llenarCampos(int numero) {

        this.jLabelNumPlanilla.setText("" + numero);
        String consulta, nombreApellido, marcaModeloPat;
        Connection co = this.controlador.obtenerConexion();
        //Datos a consultar
        consulta = "SELECT per.nombre, per.apellido, v.marca, v.modelo, v.patente, p.fecha_de_entrada,"
                + " p.fecha_de_salida, p.pagado, p.descripcion, p.entregado, p.notificar FROM planilla AS p INNER JOIN cliente AS c ON "
                + " p.idcliente = c.idcliente INNER JOIN persona AS per ON per.idpersona = c.idpersona "
                + "INNER JOIN vehiculo AS v ON v.idvehiculo = p.idvehiculo "
                + " WHERE p.idplanilla = '" + numero + "'"; //Esta consulta se puede optimizar
        try {
            Statement st = co.createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while (rs.next()) {  //Un solo next porque es una sola planilla
                nombreApellido = rs.getString(1).concat(" " + rs.getString(2));
                marcaModeloPat = rs.getString(3).concat(" " + (rs.getString(4))).concat(": " + (rs.getString(5)));
                this.jCheckBoxPagado.setSelected(rs.getBoolean(8));
                //String fechaHoyArg = new SimpleDateFormat("dd/MM/YYYY", Locale.FRANCE).format(rs.getDate(6));
                this.jDateChooserEntrada.setDate(rs.getDate(6));
                this.jDateChooserSalida.setDate(rs.getDate(7)); //Fecha de salida - puede fallar por ser nula? -NO
                if(this.jDateChooserSalida.getDate() != null)
                    this.jCheckBoxFacturado.setSelected(true);  //Facturado
                this.jTextFieldDescripcion.setText(rs.getString(9));  //Descripcion
                this.jCheckBoxEntregado.setSelected(rs.getBoolean(10)); //Entregado
                this.jCheckBoxNotificar.setSelected(rs.getBoolean(11));  //Notificar
                this.jTextFieldDueñoCliente.setText("Cliente: " + nombreApellido);
                this.jLabelVh.setText(" ,Camión: " + marcaModeloPat);
            }
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error al obtener datos: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
            this.controlador.cerrarPanelSeleccionado();
        }
    }

    private void cargarTablaPagos(int numero) {
        Connection co = this.controlador.obtenerConexion();
        Object Registro[] = new Object[5];
        Object Registro2[] = new Object[5];
        String consultaCheque, consultaContado;
        //idcheque, fecha_emision, fecha_cobro, idforma_de_pago, monto, numerocheque, cobrado
        consultaCheque = "select cheque.* from forma_de_pago as fdp inner join planilla as p"
                + " on p.idplanilla = fdp.idplanilla inner join cheque on "
                + "cheque.idforma_de_pago = fdp.idforma_de_pago where p.idplanilla = '" + numero + "'";

        consultaContado = "select contado.* from forma_de_pago as fdp inner join planilla as p"
                + " on p.idplanilla = fdp.idplanilla inner join contado on "
                + " contado.idforma_de_pago = fdp.idforma_de_pago where p.idplanilla = '" + numero + "'";

        try {
            Statement st = co.createStatement();
            ResultSet rs = st.executeQuery(consultaCheque);
            while (rs.next()) {
                /*Registro[0] = idFdP;
                Registro[1] = tipo_pago;
                Registro[2] = monto;
                Registro[3] = cobrado;*/
                Registro[0] = rs.getInt(1); // idCheque
                Registro[1] = "Cheque";
                Registro[2] = rs.getLong(5);
                if(rs.getBoolean(7))  //Columna de cobrado
                    Registro[3] = "Sí";
                else
                    Registro[3] = "No";
                this.modeloPagos.addRow(Registro);
            }
            //idforma_de_pago, idcontado, monto
            Statement st2 = co.createStatement();
            ResultSet rs2 = st2.executeQuery(consultaContado);
            while (rs2.next()) {
                Registro2[0] = rs2.getInt(1); //idContado
                Registro2[1] = "Contado";
                Registro2[2] = rs2.getLong(2); //monto - bigint
                Registro2[3] = true;
                this.modeloPagos.addRow(Registro2);
            }

        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error al obtener datos: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        this.jTablePagos.updateUI();
    }

    private void prepararModelosTablas() {
        tablaReparaciones = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        modeloPagos = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        tablaReparaciones.setColumnIdentifiers(getColumnas());
        modeloPagos.setColumnIdentifiers(getColumnasPagos());
    }

    private void jButtonAdRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdRepActionPerformed
        //Nota: La planilla ya deberia haber sido guardada (Se requiere que se elija el Cliente y el chofer - 
        // - fecha de entrada por defecto)
        int numPlanilla = (Integer.valueOf(this.jLabelNumPlanilla.getText())); //Numero de esta planilla
        JLabel label = new JLabelAriel("Debe guardar la planilla antes de agregar una Reparación");
        

        if (estaGuardada()) { //Consulto si la planilla ya se guardo, devuelve 'true' si es así
            PanelAdReparaciones p1 = new PanelAdReparaciones(numPlanilla); //El número se usa para poder guardar la reparación
            this.controlador.cambiarDePanel(p1, "Nueva Reparación");
        }
        else
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);

// this.controlador.
    }//GEN-LAST:event_jButtonAdRepActionPerformed

    private boolean estaGuardada() { //Automáticamente obtiene el número de la planilla actual
        int numPlanilla = (Integer.valueOf(this.jLabelNumPlanilla.getText())); //Numero de esta planilla
        String consulta = "Select EXISTS (Select idplanilla from planilla where idplanilla = '"+numPlanilla+"')";
        boolean existe = false;
        try {
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while(rs.next()){
                existe = rs.getBoolean(1);
            }
            
        } catch (SQLException ex) {
            JLabelAriel label = new JLabelAriel("Problema al tratar de consultar si la planilla esta guardada: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        //Si la planilla existe en la Base de datos, entonces, se retorna 'true'
        return existe;
    }
    
  /*  public void agregarReparacion(int idRep) {
        //Método que utiliza el idRep para agregar la reparación a su lista

        //Se usa cuando se retorne desde la vista de nueva reparación
    } */ 
    
    private void jButtonPagoContadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPagoContadoActionPerformed
        //Se pulso el botón de agregar Pago. Es entonces un pago nuevo -- Para que dsps el método de agregar lo sepa:
        // --> El jRadioButtonNuevoPago se marcara como seleccionado y el label del id desaparece
        this.jLabelId.setVisible(false);
        this.jLabelIdPago.setVisible(false);
        JLabel label = new JLabelAriel("Debe guardar la planilla antes de agregar un Pago");
        
        if (estaGuardada()) {
     //       this.montoContado = new RestrictedTextField(this.jTextFieldMontoContado);
     //       this.montoContado.setOnlyNums(true);
            this.jFrameContado.setVisible(true);  //Abro la Planilla del pago Contado
            this.jDateChooserContado.setDate(new Date());
            this.jTextFieldMontoContado.setText("");       
            this.jRadioButtonNuevoPago.setSelected(true); //Es un pago Nuevo
            this.jButtonAgregarContado.setText("Agregar");
            this.jRadioButtonNuevoPago.setVisible(true);
            this.jRadioButtonNuevoPago.setEnabled(false);
            JTextFieldDateEditor dateEditor =(JTextFieldDateEditor) this.jDateChooserContado.getDateEditor();
            dateEditor.setEditable(false);  //Para que no se puede ingresar manualmente la fecha
        }
        else
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_jButtonPagoContadoActionPerformed

    private void jButtonPagoChequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPagoChequeActionPerformed
        this.jCheckBoxChequeNuevo.setSelected(true);
        this.jCheckBoxChequeNuevo.setEnabled(false);
        this.jLabelIdCheque.setVisible(false); //No se muestra el id porque es un cheque nuevo
        JLabel label = new JLabelAriel("Debe guardar la planilla antes de agregar un Pago");
        //Hay que preguntar si es para modificar o nueva y dividir debajo un camino a cada método
        if (estaGuardada()) { //Pregunta si la planilla está guardada -- Sin sentido, sino no hubiera llegado hasta acá
      //      this.montoCheque = new RestrictedTextField(this.jTextFieldMontoCheque);
            this.jTextFieldMontoCheque.setText("0"); //Posiblemente tenga conflicto con el de arriba, aunque recién abajo Restrinjo
     //       this.montoCheque.setOnlyNums(true);
            this.jCheckBoxChCobrado.setSelected(false);
            this.jFrameCheque.setVisible(true);
         //   this.jDateChooserChCobro.setDate(new Date());
            // this.jDateChooserChEmision.setDate(new Date());  --Este no porque puede ser nulo
        }
        else  //Hacer lo mismo para el agregado de pagos al contado o cuenta corriente
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_jButtonPagoChequeActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        this.jTextFieldMontoContado.setText("");
        this.jFrameContado.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonCancelarChequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarChequeActionPerformed
        this.jFrameCheque.dispose();
    }//GEN-LAST:event_jButtonCancelarChequeActionPerformed

    private void jButtonAgregarChequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarChequeActionPerformed
        //Método agregar cheque --- La fecha de emisión puede ser nula --Deberá contemplar si es un cheque siendo modificado
        
        if(!(this.jTextFieldNCheque.getText().equals("") || this.jDateChooserChEmision.getDate() == null || this.jTextFieldMontoCheque.getText().equals("")))
        {  //Si número de cheque, fecha o contado son nulos no se agrega el cheque;
            if(!this.jCheckBoxChequeNuevo.isSelected()){ //Si no está seleccionado --> No es un cheque nuevo
                actualizarCheque();
            }
            else{
                grabarNuevoCheque();
            }
        }
        else{
            JLabel label = new JLabelAriel(" El número de cheque, monto y la fecha de emisión no pueden quedar vacíos");
            JOptionPane.showMessageDialog(null, label, "INFO", JOptionPane.WARNING_MESSAGE);   
        }
        //----------
    }//GEN-LAST:event_jButtonAgregarChequeActionPerformed

    private void actualizarCheque() {
        //Actualizo el cheque con los datos de la vista y el id del cheque
        int idCheque = Integer.valueOf(this.jLabelIdCheque.getText());
        int numPlanilla = Integer.valueOf((this.jLabelNumPlanilla.getText()));
        Date chequeCobro = this.jDateChooserChCobro.getDate();
        Date chequeEmision = this.jDateChooserChEmision.getDate();
        try {
            long monto = Integer.valueOf(this.jTextFieldMontoCheque.getText());
            boolean cobrado = this.jCheckBoxChCobrado.isSelected();
            String numeroCheque = this.jTextFieldNCheque.getText();
            //El atributo notificar se agrega en el método que actualiza la BdD
            if (chequeEmision != null && monto != 0 && numeroCheque != null) {
                actualizarChequeBdB(idCheque, chequeCobro, numeroCheque, monto, chequeEmision, cobrado);
                this.jFrameCheque.dispose();
                DefaultTableModel dtm = (DefaultTableModel) this.jTablePagos.getModel();
                dtm.setRowCount(0);  //Magicamente funciona y sirve para eliminar las filas de la tabla  
                this.cargarTablaPagos(numPlanilla);
            } else {
                JLabel label = new JLabelAriel("Faltan Datos");
                JOptionPane.showMessageDialog(null, label, "ATENCIÓN!!", JOptionPane.WARNING_MESSAGE);
            }
        }catch(NumberFormatException ex){
            JLabel label = new JLabelAriel("Error en el monto: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ATENCIÓN!", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void grabarNuevoCheque(){

        int idFdP = 0; //id forma de pago -- AHORA SE USA EL ID DEL CHEQUE
        int numPlanilla = Integer.valueOf(this.jLabelNumPlanilla.getText());
        Date chequeCobro = this.jDateChooserChCobro.getDate();
        Date chequeEmision = this.jDateChooserChEmision.getDate();
        long monto = Integer.valueOf(this.jTextFieldMontoCheque.getText());
        boolean cobrado = this.jCheckBoxChCobrado.isSelected();
        
        String numeroCheque = this.jTextFieldNCheque.getText();
        if (chequeEmision != null && monto != 0 && numeroCheque != null) {
            idFdP = grabarCheque(chequeEmision, monto, chequeCobro, numeroCheque, cobrado); //true si grabó bien
            
            if (idFdP != 0) {
               // agregarPagoATabla(idFdP, "cheque", monto, cobrado); No se usa más
                DefaultTableModel dtm = (DefaultTableModel) this.jTablePagos.getModel();
                dtm.setRowCount(0);  //Magicamente anduvo y sirve para eliminar las filas de la tabla
                this.cargarTablaPagos(numPlanilla);
                JLabel label = new JLabelAriel("Cheque Agregado");
                JOptionPane.showMessageDialog(this.jFrameCheque, label, "ATENCIÓN!", JOptionPane.PLAIN_MESSAGE);
                this.jFrameCheque.dispose();
            }
        }else{
            JLabel label = new JLabelAriel("Monto, fecha de emisión y número de cheque son datos obligatorios");
            JOptionPane.showMessageDialog(null, label, "ATENCIÓN!!", JOptionPane.WARNING_MESSAGE); 
        }
    }
    
    private void jButtonFVhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFVhActionPerformed
        //Filtro para los vehículos. A travéz de la marca filtra los datos del JComboBoxCamiones
        String marca, modelo, patente;
        try {
            //Acá hay que filtrar los vehículos por la patente escrita en jTextFielFPatente
            this.quitarActionListenersJComboBox();
            String patenteFiltro = this.jTextFieldFPatente.getText();
            patenteFiltro = patenteFiltro.toLowerCase();

            PreparedStatement ps = this.controlador.obtenerConexion().prepareStatement("SELECT v.idvehiculo, v.marca, v.modelo, v.patente "
                    + "FROM vehiculo AS v WHERE lower(v.marca) LIKE ? ");
            ps.setString(1, "%"+patenteFiltro+"%");
            // En este método el ActionItemListener debería haber sido quitado
            this.jComboBoxVh.removeAllItems();
            ComboItem cmItem = new ComboItem("0", "<<Seleccione un Camión>>");
            this.jComboBoxVh.addItem(cmItem);
            ComboItem cmItem2 = new ComboItem("0", "--Ver Todos--");
            this.jComboBoxVh.addItem(cmItem2);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String idVh = String.valueOf(rs.getInt(1));
                marca = rs.getString(2);
                modelo = rs.getString(3);
                patente = rs.getString(4);
                String marcaModelo = marca + " " + modelo;
                ComboItem comboItem = new ComboItem(idVh, marcaModelo + " " + patente); //(clave, valor)
                this.jComboBoxVh.addItem(comboItem);
                this.jComboBoxVh.updateUI();
                //Modificado en "code" --> "type" en parte de Diseño de Netbeans
                //Para obtener el valor por patente:
                /*Object item = comboBox.getSelectedItem();
                String value = ((ComboItem)item).getValue(); ó .getKey() según se prefiera*/
            }
       /*     if (!patenteFiltro.equals("")) { //Si el filtro de la patente no está vacío
                cargarVhBdD(ps, patenteFiltro); //
            } else {
                JOptionPane.showMessageDialog(null, "Debe escribir una patente");
            } */
            this.agregarListenersJComboBox();
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error en el Filtrado: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ATENCIÓN!!", JOptionPane.WARNING_MESSAGE);
            System.out.println("Error:"+ex.getMessage());
        }
    }//GEN-LAST:event_jButtonFVhActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        //El dato de Camión es necesario y sirve para completar el campo de cliente (obligatorio)
        // El dato fecha de salida y descripción pueden ser nulos
        //Fecha_entrada, Entregado, Facturado, Planilla Paga nunca están vacíos
        JLabel label2 = new JLabelAriel(" La descripción no puede estar vacía ");
        ComboItem vh = (ComboItem) this.jComboBoxVh.getSelectedItem(); //El camión
        ComboItem ch = (ComboItem) this.jComboBoxPersona.getSelectedItem(); //El chofer
        String descripcion = this.jTextFieldDescripcion.getText();
        if (estaGuardada()) // Retorna true si está guardada; Automáticamente obtiene el numero de Planilla
        { //Quizás se pueda agregar al más acá
            if (!descripcion.equals("")) {
                actualizarPlanilla();
            } else {
                JOptionPane.showMessageDialog(null, label2, "ERROR", JOptionPane.WARNING_MESSAGE);
            }
            //Se podría agregar un JLabel que diga que ya se actualizo
        } else if (!(vh.getKey().equals("0") || ch.getKey().equals("0") || descripcion.equals(""))) {
            guardarPlanilla();
            //Se podría agregar un JLabel que diga que ya se guardo
        } else {
            JLabel label = new JLabelAriel(" Datos incompletos - Vehículo, chofer y descripción obligatorios ");
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void guardarPlanilla() { //Datos: idplanilla, fecha in, fecha out, pagado, desc, idCliente, idPersona, idVh, facturado
        ComboItem chofer = (ComboItem) this.jComboBoxPersona.getSelectedItem(); //chofer.getKey() = id de la persona
        ComboItem vh = (ComboItem) this.jComboBoxVh.getSelectedItem(); // vh.getKey() = id del vehículo
        Object fSalida = this.jDateChooserSalida.getDate();
        Object fEntrada = this.jDateChooserEntrada.getDate();
        if (!(fEntrada == null) || (chofer.getKey().equals("0")) || (chofer.getKey().equals("-1")) || (vh.getKey().equals("0"))) { 
        //El if pregunta si (por la key obtenida) no se seleccionó Vh o chofer o no se ingresó fecha de entrada
            if (fSalida == null) {
                guardarEnBdD(false);
            } else {
                guardarEnBdD(true); //La fecha de salida esta seteada
            }
        } else {
            JLabel label = new JLabelAriel(" Datos incompletos - Vehículo, chofer y descripción obligatorios ");
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }

    }

    private void actualizarPlanilla(){
    //Método posterior a ActionPerformed de guardar planilla y anterior a método que actualiza la planilla directamente en la Base de datos.
        Object fSalida = this.jDateChooserSalida.getDate();
        //Si hay fecha de salida no puede estar el jCheckBoxFacturado en 'False'. Lo mismo viceversa.
        if(fSalida != null){ //Hay fecha de Salida
            this.jCheckBoxFacturado.setSelected(true);
            actualizarPlanilla(fSalida == null); //Condicional: 'true' o 'false' - 'true' en caso de que la fecha de salida sea nula
        }
        else if(this.jCheckBoxFacturado.isSelected()){
            JLabel label = new JLabelAriel(" Datos incompletos - La planilla figura entregada pero no hay fecha de entrega. "
                    + "\n Elija una fecha de entrega e intente actualizar la planilla nuevamente");
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        else{
            //La planilla no tiene fecha de salida y tampoco está marcado como entregada (esta bien logicamente)
            //Debemos actualizar la planilla porque es posible que se hayan modificado otros datos
            actualizarPlanilla(fSalida == null);    
        }
    }
    
    private void guardarEnBdD(Boolean fSalidaNula) {
        ComboItem chofer = (ComboItem) this.jComboBoxPersona.getSelectedItem(); //chofer.getKey() = id de la persona
        ComboItem vh = (ComboItem) this.jComboBoxVh.getSelectedItem(); // vh.getKey() = id del vehículo
        Connection co = this.controlador.obtenerConexion();
        try {
            co.setAutoCommit(false); //Para realizar la transacción
            PreparedStatement ps = co.prepareStatement("INSERT INTO planilla VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

            ps.setInt(1, Integer.valueOf(this.jLabelNumPlanilla.getText()));
            ps.setDate(2, new java.sql.Date(this.jDateChooserEntrada.getDate().getTime()));
            if (this.jCheckBoxFacturado.isSelected()) { //Si está facturado cargo la fecha
                if (!fSalidaNula) { //Si no es nula guarda la fecha
                    ps.setDate(3, new java.sql.Date(this.jDateChooserSalida.getDate().getTime())); //Problemas cuando es null
                } else {
                    ps.setDate(3, null);
                }
            } else {
                ps.setDate(3, null);
            }
            ps.setBoolean(4, this.jCheckBoxPagado.isSelected()); //pagado
            ps.setString(5, this.jTextFieldDescripcion.getText());
            ps.setInt(6, this.idCliente);
            ps.setInt(7, Integer.valueOf(chofer.getKey())); //idpersona - para chofer
            ps.setInt(8, Integer.valueOf(vh.getKey()));
            ps.setBoolean(9, this.jCheckBoxFacturado.isSelected()); //facturado
            ps.setBoolean(10, this.jCheckBoxEntregado.isSelected()); //Entregado
            ps.setBoolean(11, this.jCheckBoxNotificar.isSelected());  //Notificar
            int executeUpdate = ps.executeUpdate();
            co.commit(); //Ahora si se acepta que anduvo bien
            JLabel label = new JLabelAriel("Guardado con éxito");
            JOptionPane.showMessageDialog(null, label, "INFO", JOptionPane.INFORMATION_MESSAGE);
            this.jButtonGuardar.setText("Actualizar");
        } catch (SQLException ex) {
            try {
                co.rollback();
            } catch (SQLException ex1) {
                JLabel label = new JLabelAriel("Error: " + ex1.getMessage());
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            }
            JLabel label = new JLabelAriel("Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(null,label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void actualizarPlanilla(Boolean fSalidaNula) { //Si la fecha de salida es nula
    //    ComboItem chofer = (ComboItem) this.jComboBoxPersona.getSelectedItem(); //chofer.getKey() = id de la persona
    //    ComboItem vh = (ComboItem) this.jComboBoxVh.getSelectedItem(); // vh.getKey() = id del vehículo
        Connection co = this.controlador.obtenerConexion();
        int idPlanilla;
        idPlanilla = Integer.valueOf(this.jLabelNumPlanilla.getText());
        try {
            co.setAutoCommit(false); //Para realizar la transacción
            PreparedStatement ps = co.prepareStatement("UPDATE planilla SET fecha_de_entrada = ?, fecha_de_salida = ?, "
                    + "pagado = ?, descripcion = ?, facturado = ?, entregado = ?, notificar = ? WHERE idplanilla = '" + idPlanilla + "' ");
            
            ps.setDate(1, new java.sql.Date(this.jDateChooserEntrada.getDate().getTime()));
            if (this.jCheckBoxFacturado.isSelected()) { //Si está Facturado el Vh cargo la fecha  
                if (!fSalidaNula) {
                    ps.setDate(2, new java.sql.Date(this.jDateChooserSalida.getDate().getTime())); //Problemas cuando es null-resuelto
                } else {
                    ps.setDate(2, null);
                }
            }
            else{                       // Este "else" va sí o sí porque sino el parámetro 2 puede quedar vacío. (Fecha de salida)
                ps.setDate(2, null);
            }
            ps.setBoolean(3, this.jCheckBoxPagado.isSelected()); //pagado
            ps.setString(4, this.jTextFieldDescripcion.getText()); //Descripción
            ps.setBoolean(5, this.jCheckBoxFacturado.isSelected()); //facturado
            ps.setBoolean(6, this.jCheckBoxEntregado.isSelected()); //Entregado
            ps.setBoolean(7, this.jCheckBoxNotificar.isSelected()); //Notificar
            int executeUpdate = ps.executeUpdate();
            co.commit(); //Ahora si se acepta que anduvo bien
            JLabel label = new JLabelAriel("Actualizado con éxito");
            JOptionPane.showMessageDialog(null, label, "INFO", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            try {
                co.rollback();
            } catch (SQLException ex1) {
                JLabel label = new JLabelAriel("Error al deshacer guardado fallido: "+ ex1.getMessage());
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            }
            JLabel label = new JLabelAriel("Error al guardar/actualizar: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void jButtonFPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFPerActionPerformed
        String filtroPersona = this.jTextFieldFPersona.getText();
        this.quitarActionListenersJComboBox();
        if (!filtroPersona.equals("")) {
            filtroPersona = filtroPersona.toLowerCase(); //Para que puedan compararse en la consulta como minúsculas
        }
        String consulta = "SELECT p.nombre, p.apellido, c.apodo, p.idpersona FROM persona AS p INNER JOIN chofer AS c "
                + "ON p.idpersona = c.idpersona WHERE lower(p.nombre) LIKE '%" + filtroPersona + "%' "
                + "or lower(c.apodo) LIKE '%" + filtroPersona + "%' ";
        if (!filtroPersona.equals("")) {//Si el filtro de Persona no está vacío
            this.cargarPersonasBdD(consulta);
        } else {
            JLabel label = new JLabelAriel("Debe ingresar un Nombre o un Apodo para poder filtrar");
            JOptionPane.showMessageDialog(null, label, "INFO", JOptionPane.INFORMATION_MESSAGE);
        }

        this.agregarListenersJComboBox();
    }//GEN-LAST:event_jButtonFPerActionPerformed

    private void jFrameDeudaPlanillaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFrameDeudaPlanillaActionPerformed
        //¿La cuenta corriente tendría que empezar desde el día que el camión de esta planilla esté entregado? - Sí
        //Quizás esta vista tendría que poner un jTextField con el total del importe y preguntar si ese total está bien
        JLabel label = new JLabelAriel("Debe guardar la planilla antes de agregar un Pago");
        JLabel label2;

        long montoRestante = 0;
        if (!true/*this.jCheckBoxFacturado.isSelected()*/) { //si el vh no está entregado -- Modificado para que no joda
            label2 = new JLabelAriel("El Vehículo debe ser entregado antes de calcular Deudas");
            JOptionPane.showMessageDialog(null, label2, "Error", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (estaGuardada()) {
                this.jFrameEstadoPagos.setVisible(true);
                this.jTextFieldImporteTotal.setText(montoPorReparaciones() + "");
                this.jTextFieldMontoPagado.setText(montoPagos(Integer.valueOf(this.jLabelNumPlanilla.getText())) + "");
                int numPlanilla = Integer.valueOf(this.jLabelNumPlanilla.getText());
                montoRestante = montoPorReparaciones() - montoPagos(numPlanilla);
                this.jTextFieldCC.setText(montoRestante + "");
                this.jTextFieldACobrar.setText(montoACobrarCheques(numPlanilla) + "");
            } else {
                JOptionPane.showMessageDialog(null, label, "Error", JOptionPane.WARNING_MESSAGE);
            }
        } //Termina el else que permite abrir la Vista


    }//GEN-LAST:event_jFrameDeudaPlanillaActionPerformed

    private long montoPorReparaciones() {
        //Método que devuelve la suma de los importes de las reparaciones que tenga la planilla actual
        long monto = 0;
        String consulta = "SELECT SUM(importe) FROM reparacion WHERE idplanilla = "
                + "'"+Integer.valueOf(this.jLabelNumPlanilla.getText())+"' ";
        
        Connection co = this.controlador.obtenerConexion();
        try {
            Statement st = co.createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while(rs.next()){ //El importe es uno solo pero así evitamos intentar capturar un valor cuando el importe es null
                monto += rs.getLong(1); //El monto suma el importe de todas las reparaciones enmarcadas por esta planilla
            }
        } catch (SQLException ex) {
            JLabelAriel label = new JLabelAriel("Error al consultar monto " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        return monto;
    }
    
    private long montoPorReparaciones(int idCliente) {
        //Obtiene la suma de los importes de las reparaciones asignadas a las planillas marcadas como impagas y facturadas
        long suma = 0;
        Connection co = this.controlador.obtenerConexion();
        String sql = "SELECT SUM(r.IMPORTE) FROM reparacion AS r INNER JOIN planilla as p ON p.idplanilla = r.idplanilla INNER JOIN cliente"
                + " AS c ON p.idcliente = c.idcliente WHERE c.idcliente = '"+idCliente+"' AND p.pagado = false AND p.facturado = true ";
        Statement st;
        try {
            st = co.createStatement();
        ResultSet rs = st.executeQuery(sql);
        while(rs.next()){
            suma+= rs.getLong(1);  //El while solo se ejecuta una vez
        }
        } catch (SQLException ex) {
            JLabelAriel label = new JLabelAriel("Error al consultar monto por reparaciones: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        return suma;
    }
    
    private long montoPagos(int idCliente, int recarga){
        //Método que retorna el importe total de pagos del cliente.
        String sql = "SELECT p.idplanilla FROM planilla as p INNER JOIN cliente AS c ON p.idcliente = c.idcliente "
                + "WHERE c.idcliente = '"+idCliente+"' AND p.facturado = true"; //todas las planillas del Cliente
        long monto = 0;
        try{
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                monto += montoPagosPlanilla(rs.getInt(1));  //Paso la planilla del cliente y le calculo el importe que tiene
            }
        }catch(SQLException ex){
            JLabelAriel label = new JLabelAriel("Error al consultar montos de Pagos: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        return monto;
    }
    
    private Long montoPagosPlanilla(int idPlanilla){
        //Método que calcula cuanto dinero se recibió - Los cheques no cobrados se suman como pagos igualmente.
        //
        long monto = 0;
        //Esta consulta Retorna dos valores para los montos de pago de cheques y contado 
        String consulta = "Select sum(ch.monto) from cheque as ch inner join forma_de_pago as fdp on fdp.idforma_de_pago = ch.idforma_de_pago "
                + "inner join planilla as p on p.idplanilla = fdp.idplanilla where p.idplanilla= '"+idPlanilla+"' "
                + "UNION"
                + " select sum(c.monto) from contado as c inner join forma_de_pago as fdp on fdp.idforma_de_pago = c.idforma_de_pago "
                + "inner join planilla as p on p.idplanilla = fdp.idplanilla where p.idplanilla = '"+idPlanilla+"'";
        try {
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while(rs.next()){
                monto += rs.getLong(1); //Hay que probar si anda - Entiendo que primero toma el monto de cheque y en el siguiente el de contado
            }
            
        } catch (SQLException ex) {
            JLabelAriel label = new JLabelAriel(" Error al cargar pagos: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        return monto;
    }
    
    private Long montoPagos(int idPlanilla){
        //Método que calcula cuanto dinero se recibió - Los cheques no cobrados se suman como pagos igualmente
       // long montoRep = this.montoPorReparaciones();
        long monto = 0; 
        //Esta consulta Retorna dos valores para los montos de pago de cheques y contado 
        String consulta = "Select sum(ch.monto) from cheque as ch inner join forma_de_pago as fdp on fdp.idforma_de_pago = ch.idforma_de_pago "
                + "inner join planilla as p on p.idplanilla = fdp.idplanilla where p.idplanilla= '"+idPlanilla+"' "
                + "UNION"
                + " select sum(c.monto) from contado as c inner join forma_de_pago as fdp on fdp.idforma_de_pago = c.idforma_de_pago "
                + "inner join planilla as p on p.idplanilla = fdp.idplanilla where p.idplanilla = '"+idPlanilla+"'";
        try {
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while(rs.next()){
                monto += rs.getLong(1); //Hay que probar si anda - Entiendo que primero toma el monto de cheque y en el siguiente el de contado
            }
            
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel(" Error al cargar pagos: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        return monto;
    }

    private long montoACobrarCheques(int idPlanilla){
        // Retorna el monto que falta por cobrar de los cheques obtenidos.
        long montoSinAcreditarse = 0;
        String consulta = "select sum(monto) from cheque as c inner join forma_de_pago as fdp on c.idforma_de_pago = fdp.idforma_de_pago "
                + "inner join planilla as p on p.idplanilla = fdp.idplanilla where p.idplanilla = '"+idPlanilla+"' and c.cobrado = false;";
        try {
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while(rs.next()){
                montoSinAcreditarse = rs.getLong(1);
            }
            
        } catch (SQLException ex) {
            //~~~~
        }
        
        return montoSinAcreditarse;
    }
    
    private void jButtonVerPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerPagoActionPerformed
        //Supongo que tengo que armar la vista de "Ver pagos" o "Editar Pagos" y pasarle el id de este pago - Nó!
        //La información del pago seleccionado puede mostrarse en sus respectivas vistas
        int filaSelect = this.jTablePagos.getSelectedRow();
        if(filaSelect != -1){ //Seleccione una fila
            String tipoPago = (String) this.jTablePagos.getValueAt(filaSelect, 1); //Para saber si es Cheque o Contado
            int idPago = (int) this.jTablePagos.getValueAt(filaSelect, 0);
            if(tipoPago.toLowerCase().equals("cheque"))
                modificarCheque(idPago);//Abro la vista de Cheque - Poner método acá
            else
                modificarContado(idPago);//Abro vista contado
        }
        else{
            JLabel label = new JLabelAriel("Debe seleccionar una fila de la Tabla de Pagos ");
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }     
    }//GEN-LAST:event_jButtonVerPagoActionPerformed

    private void jButtonAceptarDeudasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAceptarDeudasActionPerformed
        this.jFrameEstadoPagos.dispose();
    }//GEN-LAST:event_jButtonAceptarDeudasActionPerformed

    private void jButtonQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitarActionPerformed
        //Tengo que quitar la reparación seleccionada. Nose como lo hare pero quizás se pueda con la ayuda del while de una consulta
        int filaSeleccionada = this.jTableReparaciones.getSelectedRow();
        JLabel label = new JLabelAriel(" No hay fila seleccionada ");
        if (filaSeleccionada != -1) {
            this.borrarReparacion(Integer.valueOf(""+this.jTableReparaciones.getValueAt(filaSeleccionada, 0)));
        } else {
            JOptionPane.showMessageDialog(null, label, "ATENCIÓN", JOptionPane.WARNING_MESSAGE);
        }
        this.onFocus(); //Método para actualizar toda la info, incluída las reparaciones

    }//GEN-LAST:event_jButtonQuitarActionPerformed

    private void jButtonAgregarContadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarContadoActionPerformed
        //Para agregar este pago necesito generar un nuevo objeto "forma_de_pago" en la Base de Datos
        //Método agregar cheque --- La fecha de emisión puede ser nula
        //--Dsps habría que preguntar acá si es para Actualizar o Grabar Nuevo -- NOSE COMO
        int numPlanilla = Integer.valueOf(this.jLabelNumPlanilla.getText());
        try{
            if (this.jRadioButtonNuevoPago.isSelected()) //Es un Pago Contado Nuevo
                agregarPagoContado();
            else
                actualizarPagoContado(); //No es nuevo así que hay que actualizar 
            this.jFrameContado.dispose();
            this.cargarTablaPagos(numPlanilla);
        
        }catch(NumberFormatException ex){
            JLabel label = new JLabelAriel(" Error al procesar el monto: "+ex.getMessage());
            JOptionPane.showMessageDialog(this.jFrameContado, label, "ATENCIÓN", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAgregarContadoActionPerformed

    private void agregarPagoContado() throws NumberFormatException{
        int idFdP = 0; //id forma de pago
     //   int numPlanilla = Integer.valueOf(this.jLabelNumPlanilla.getText());
        long monto;
        this.jRadioButtonNuevoPago.setEnabled(false);
        Date diaCobro = this.jDateChooserContado.getDate();
   /*     if (!this.jTextFieldMontoContado.getText().equals("")){ //Si el monto no está vacío
        } */
        monto = (Long.valueOf(this.jTextFieldMontoContado.getText()));
        if (diaCobro != null && monto != 0) {
            idFdP = grabarNuevoPagoContado(diaCobro); //valor distinto de 0 si grabó bien
            if (idFdP != 0) {
                DefaultTableModel dtm = (DefaultTableModel) this.jTablePagos.getModel();
                dtm.setRowCount(0);  //Magicamente anduvo y sirve para eliminar las filas de la tabla            
                JLabel label2 = new JLabelAriel("Pago Contado Agregado");
                JOptionPane.showMessageDialog(this.jFrameContado, label2, "MENSAJE", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JLabel label3 = new JLabelAriel("La fecha y el monto son obligatorios");
            JOptionPane.showMessageDialog(this.jFrameContado, label3, "FALTAN DATOS", JOptionPane.WARNING_MESSAGE);
        }      
    }
    

    
    private void jButtonBorrarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarPagoActionPerformed
        //Borrar el Pago seleccionado - Recordar que el id de la tabla es de cada pago
        int filaSelect = this.jTablePagos.getSelectedRow();
        int numPlanilla = Integer.valueOf(this.jLabelNumPlanilla.getText());
        if(filaSelect != -1){ //Hay fila seleccionada --> Hay que borrar el pago seleccionado viendo si es cheque o contado
            String tipoPago = (String) this.jTablePagos.getValueAt(filaSelect, 1); //Para saber si es Cheque o Contado
            if(tipoPago.toLowerCase().equals("cheque"))
                borrarCheque(""+this.jTablePagos.getValueAt(filaSelect, 0)); //Paso el id del cheque
            else
                borrarContado("" + this.jTablePagos.getValueAt(filaSelect, 0)); //Paso el id del contado
            DefaultTableModel dtm = (DefaultTableModel) this.jTablePagos.getModel();
            dtm.setRowCount(0);  //Magicamente anduvo y sirve para eliminar las filas de la tabla 
            this.cargarTablaPagos(numPlanilla); //Actualizo la tabla de pagos
        } else {
            JLabel label3 = new JLabelAriel("No hay fila Seleccionada");
            JOptionPane.showMessageDialog(null, label3, "FALTAN DATOS", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonBorrarPagoActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.controlador.cerrarPanelSeleccionado();
        //llamar al controlador con "cerrarPanelSeleccionado()"
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonModifRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifRepActionPerformed
        // Action Performed para editar una Reparación
        int filaSelect = this.jTableReparaciones.getSelectedRow();
        int idReparacion;
        if(filaSelect != -1){
            
            if(!(this.jTableReparaciones.getSelectedRow() == 0)){  //Si no se seleccionó la primera fila ("Importe") -->
                idReparacion =  Integer.valueOf(""+this.jTableReparaciones.getValueAt(filaSelect, 0));
                int numPlanilla = (Integer.valueOf(this.jLabelNumPlanilla.getText())); //Numero de esta planilla

                PanelAdReparaciones p1 = new PanelAdReparaciones(numPlanilla, idReparacion); //El número se usa para poder guardar la reparación
                this.controlador.cambiarDePanel(p1, "Modificar Reparación");
                
            }
            else{ //La reparación seleccionada es en realidad el IMPORTE
                JLabel label3 = new JLabelAriel("La fila seleccionada es el IMPORTE");
                JOptionPane.showMessageDialog(null, label3, "¡ERROR!", JOptionPane.WARNING_MESSAGE);  
            }
        }else{ //No hay fila seleccionada
            JLabel label3 = new JLabelAriel("Debe seleccionar una fila de la tabla");
            JOptionPane.showMessageDialog(null, label3, "¡Atención!", JOptionPane.WARNING_MESSAGE);        
        }
    }//GEN-LAST:event_jButtonModifRepActionPerformed

    private void jButtonInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInfoActionPerformed
        // Abre el Frame de JFrameInfo para mostrar info de la vista (Para que sirve para que no sirve).
        this.jFrameInfo.setVisible(true);
    }//GEN-LAST:event_jButtonInfoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.jFrameInfo.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBoxFacturadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFacturadoActionPerformed
        // Cuando selecciono facturado pongo la fecha de hoy en "fecha_salida" aunque en realidad es fecha de facturado
        if(this.jCheckBoxFacturado.isSelected())
            this.jDateChooserSalida.setDate(new Date());
        else
            this.jDateChooserSalida.setDate(null);
    }//GEN-LAST:event_jCheckBoxFacturadoActionPerformed

    /**/
    private void borrarCheque(String idcheque){
        int idCh = Integer.valueOf(idcheque);
        try {
            PreparedStatement ps = this.controlador.obtenerConexion().prepareStatement("DELETE FROM cheque where idcheque = ?");
            ps.setInt(1, idCh);
            ps.executeUpdate();
            JLabel label3 = new JLabelAriel("Cheque eliminado");
            JOptionPane.showMessageDialog(null, label3, "ATENCIÓN!", JOptionPane.PLAIN_MESSAGE);
        } catch (SQLException ex) {
            JLabel label3 = new JLabelAriel("Error: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label3, "Borrado fallido", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void borrarContado(String idcontado){
        int idCon = Integer.valueOf(idcontado);
        try {
            PreparedStatement ps = this.controlador.obtenerConexion().prepareStatement("DELETE FROM contado where idcontado = ?");
            ps.setInt(1, idCon);
            ps.executeUpdate();
            JLabel label3 = new JLabelAriel("Pago Contado eliminado");
            JOptionPane.showMessageDialog(null, label3, "ATENCIÓN!", JOptionPane.PLAIN_MESSAGE);
        } catch (SQLException ex) {
            JLabel label3 = new JLabelAriel("Error: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label3, "Borrado fallido", JOptionPane.WARNING_MESSAGE);
        } 
    }
    
    /*
    private int grabarContado(long monto, Date diaCobro) {
        //Devuelve true si fue agregado o actualizado correctamente
        if (true) //Acá habrá que preguntar si és nuevo o para actualizar
        {
            return grabarNuevoPagoContado(monto, diaCobro);
        } else {
            return actualizarPagoContado(monto, diaCobro);// Acá debería poner UPDATE en vez de INSERT
        }
    } */

    private int grabarNuevoPagoContado(Date diaCobro) {
        // En este método hay que grabar primero la forma de pago y dsps tomar el id generado y grabar el pago contado
        // Todo esto en forma de transacción para que no queden datos afori
        int idFdP = 0; //paqe no joda -dsps borrar
        int numPlanilla = Integer.valueOf(this.jLabelNumPlanilla.getText());
        Connection co = this.controlador.obtenerConexion();
        try {
            co.setAutoCommit(false);
            long monto = Integer.valueOf(this.jTextFieldMontoContado.getText());
            //Codigo para grabar fDP
            PreparedStatement ps = co.prepareStatement("INSERT INTO forma_de_pago VALUES(default, ?, ?)", 
                    Statement.RETURN_GENERATED_KEYS);
            ps.setObject(1, "contado", Types.OTHER); //Es un ENUM
            ps.setInt(2, numPlanilla);
            ps.executeUpdate();
            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    idFdP = generatedKeys.getInt(1);
                }
                PreparedStatement ps2 = co.prepareStatement("INSERT INTO contado "
                        + "VALUES(default, ?, ?, ?)");
                ps2.setLong(1, monto);
                ps2.setInt(2, idFdP);
                ps2.setDate(3, new java.sql.Date(diaCobro.getTime()));
                ps2.executeUpdate();
                co.commit();
            }
        } catch (SQLException | NumberFormatException ex) {
            System.out.println("Error: " + ex.getMessage());
            try {
                co.rollback();
            } catch (SQLException ex1) {
                System.out.println("Error: " + ex1.getMessage());
            }
        }
        return idFdP;
    }
    
    private void actualizarPagoContado(){
        // Actualizo un pago contado
        int idPago = Integer.valueOf(this.jLabelIdPago.getText());
   //   int numPlanilla = Integer.valueOf(this.jLabelNumPlanilla.getText());
        Date diaCobro = this.jDateChooserContado.getDate();
        Connection co = this.controlador.obtenerConexion();
        try {
            long monto = Integer.valueOf(this.jTextFieldMontoContado.getText());
            co.setAutoCommit(false);
            PreparedStatement ps = co.prepareStatement("UPDATE contado SET monto = '"+monto+"', "
            + "fecha = '"+diaCobro+"' WHERE idcontado = '"+idPago+"' "); //La fecha no creo que ande
            
            DefaultTableModel dtm = (DefaultTableModel) this.jTablePagos.getModel();
            dtm.setRowCount(0);  //Magicamente anduvo y sirve para eliminar las filas de la tabla 
            ps.executeUpdate();
            co.commit();
        } catch (SQLException | NumberFormatException ex) {
            System.out.println("Error: " + ex.getMessage());
            try {
                co.rollback();
            } catch (SQLException ex1) {
                System.out.println("Error: " + ex1.getMessage());
            }
        }       
    }
/*
    private void borrarRepDeTabla(int filaSeleccionada){
        //El numero de fila seleccionada haría coincidir la reparación que se busca teniendo en cuenta el orden en que salen
        String consulta = "SELECT idreparacion FROM reparacion";
        int idRepSeleccionada = 0;
        int i = 0;
        try {
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while(rs.next()){
                idRepSeleccionada = rs.getInt(1);
                if(idRepSeleccionada == filaSeleccionada)
                    break;
                //else: sigue hasta que la fila seleccionada indique que id de reparación tenemos
            }
            borrarReparacion(idRepSeleccionada);
            
        } catch (SQLException ex) {
            //
        }
    } */
    
    private void borrarReparacion(int idRep){
        if(idRep != 0){
            try {
                PreparedStatement ps = this.controlador.obtenerConexion().prepareStatement(""
                        + "DELETE FROM reparacion WHERE idreparacion = '"+idRep+"'");
                int executeUpdate = ps.executeUpdate();
                JLabel label = new JLabelAriel("Reparación Borrada");
                JOptionPane.showMessageDialog(null, label, "INFO", JOptionPane.INFORMATION_MESSAGE);                
            } catch (SQLException ex) {
                JLabel label = new JLabelAriel("Error al intentar borrar Reparación"+ex.getMessage());
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    
    private void jComboBoxPersonaItemStateChanged(ItemEvent evt) {
        //---
        if (this.itemPer == 0) {  //Primera vez que entro al método
            itemPer++;
            this.quitarActionListenersJComboBox();
            ComboItem perSeleccionada = (ComboItem) this.jComboBoxPersona.getSelectedItem();
            if ("0".equals(perSeleccionada.getKey())) //Seleccione --Ver Todos--
            {
                this.cargarPersonas("0");
                this.jComboBoxPersona.setSelectedIndex(1); //Para solucionar una búsqueda que el ComboBox hace de más
            } else if ("-1".equals(perSeleccionada.getKey())) {
                this.cargarPersonas("-1");//el -1 servirá para cargar sólo los choferes
            } else
            ; //Nada para hacer - Se seleccionó un Chofer o una persona
            this.agregarListenersJComboBox();
        }else
            itemPer = 0;  //Reinicio la variable global para la próxima vez que se llame al ActionListeners
    }

    private void jComboBoxVhItemStateChanged(java.awt.event.ItemEvent evt) {
        //Método que se ejecuta cuando selecciono un item en el ComboBox de Vehículos
        if (itemVh == 0) {  //Primera vez que se ejecuta
            itemVh++;
            quitarActionListenersJComboBox();
            this.jTextFieldDueñoCliente.setText(" ");
            int idcli = 0;
            Object item = this.jComboBoxVh.getSelectedItem();
            String patente = ((ComboItem) item).getKey(); //En realidad no trae la patente sino el idVh
            if (!patente.equals("0")) {
                idcli = this.cargarCliente(patente); //Hay idVh --> cargo el Cliente de esa patente
            } else {
                this.cargarCamiones(0); //Porque aprete "Ver Todos"
            }
            this.agregarListenersJComboBox();

            if (idcli != 0) { //Me fijo si el idcliente es distinto de 0 para consultar si tiene deuda
                this.mostrarMensajeDeBalance(idcli);  //Avisa del saldo a favor o en contra que tiene el cliente
                if (clienteTieneDeuda(idcli)) {
                    int opcion = OptionPanePerzonalizado(idcli);
                    if (opcion == 0) //0: Continuar;   1: Ver Planillas;   -1|3: Salir
                    {
                        //Continuo normalmente. Muestro otro OptionPane que diga cuanto debe y desde cuando
                    } else if (opcion == -1 || opcion == 1) {
                        this.controlador.cerrarPanelSeleccionado(); //Cierro el panel
                    }
                }
            }
        }
        else
            itemVh = 0;  //Reinicio la variable global
    }
    
    private boolean clienteTieneDeuda(int idcli){
        //Método que se fija si el cliente seleccionado tiene deuda para avisarle al usuario
        boolean valor = false;
        
        String consulta = "SELECT count(*) FROM cliente AS c INNER JOIN planilla AS p ON c.idcliente = p.idcliente "
                + "WHERE c.idcliente = '"+idcli+"' AND p.pagado = false";
        try{
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while(rs.next()){
                if(rs.getInt(1) > 0)  //El cliente tiene planillas con vehículos entregados e impagas
                  valor = true;  
            }
        }catch(SQLException ex){
            JLabel label1 = new JLabelAriel("Error: "+ex.getMessage());
            JOptionPane.showMessageDialog(jFrameCheque, label1, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        return valor;
    };
    
    private int OptionPanePerzonalizado(int idcli){
        //Retorna un JOptionPane perzonalizado
        String[] options = new String[] {"CONTINUAR", "SALIR"};
        JLabel label = new JLabelAriel("El cliente tiene planillas impagas por: "+diasPorPlanillasImpagas(idcli)+" días ¿Qué desea hacer?");
        return JOptionPane.showOptionDialog(null, label, "AVISO", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
        null, options, options[1]);
        
    }
    
    private void mostrarMensajeDeBalance(int idcli){
        //Muestra un JOptionPane que muestra el saldo (balance) del Cliente y desde cuando debe (si aplica).
        //Carga el balance de saldo del cliente seleccionado
        long montoRep, montoPagos;
 
        montoRep = montoPorReparaciones(idcli);
        montoPagos = this.montoPagos(idcli, 0);
        long suma = montoPagos - montoRep;
        JLabel label = new JLabelAriel("El balance de la cuenta del cliente es: "+suma+" con signo negativo si debe");
        JOptionPane.showMessageDialog(null, label, "BALANCE", JOptionPane.WARNING_MESSAGE);
    }
    
    
    private int diasPorPlanillasImpagas(int idCliente){
        //Método que servirá para averiguar la cantidad de días como máximo que tienen las planillas del cliente
        LocalDate fecha_hoy, fecha_salida_vh;
        java.sql.Date fecha_salida;
        java.sql.Date fechaHoy = new java.sql.Date(System.currentTimeMillis());
        fecha_hoy = fechaHoy.toLocalDate();
        int actual;
        int estadoCC = 0; //Podría usarse en base a días desde que una planilla está impaga. 
        String consulta = "SELECT MIN(pl.fecha_de_salida) FROM planilla as pl INNER JOIN cliente AS c ON c.idcliente = pl.idcliente "
                + "WHERE pl.facturado = true AND pl.pagado = false AND c.idcliente = '"+idCliente+"' ";
        Connection co = this.controlador.obtenerConexion();

        Statement st;
        try {
            st = co.createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while (rs.next()) {
                fecha_salida = rs.getDate(1);
                if (fecha_salida != null) {
                    fecha_salida_vh = fecha_salida.toLocalDate();
                    actual = (int) ChronoUnit.DAYS.between(fecha_salida_vh, fecha_hoy);
                    if (actual > estadoCC) {
                        estadoCC = actual;
                    }
                }
                // else{...}  //La fecha es nula, se retorna el valor por defecto 0  
            }
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error al contar días de planilla impaga: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        return estadoCC;
    }

    /*  //Se quito de las opciones para planillas imapgas. Ver ActionPerformed de ItemStateChage
    private void abrirVerPlanillasConCliente(int idcliente){
        // Método que abre Ver Planillas, también podría ser la planilla Administrar Pagos
        PanelVerPlanillas pVp = new PanelVerPlanillas(idcliente);
        this.controlador.cambiarDePanel(pVp, "Planillas(Cliente: "+this.jTextFieldDueñoCliente.getText()+")");
    } */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupNPago;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAceptarDeudas;
    private javax.swing.JButton jButtonAdRep;
    private javax.swing.JButton jButtonAgregarCheque;
    private javax.swing.JButton jButtonAgregarContado;
    private javax.swing.JButton jButtonBorrarPago;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonCancelarCheque;
    private javax.swing.JButton jButtonFPer;
    private javax.swing.JButton jButtonFVh;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonInfo;
    private javax.swing.JButton jButtonModifRep;
    private javax.swing.JButton jButtonPagoCheque;
    private javax.swing.JButton jButtonPagoContado;
    private javax.swing.JButton jButtonQuitar;
    private javax.swing.JButton jButtonVerPago;
    private javax.swing.JCheckBox jCheckBoxChCobrado;
    private javax.swing.JCheckBox jCheckBoxChequeNuevo;
    private javax.swing.JCheckBox jCheckBoxEntregado;
    private javax.swing.JCheckBox jCheckBoxFacturado;
    private javax.swing.JCheckBox jCheckBoxNotificar;
    private javax.swing.JCheckBox jCheckBoxNotificarCh;
    private javax.swing.JCheckBox jCheckBoxPagado;
    private javax.swing.JComboBox<ComboItem> jComboBoxPersona;
    private javax.swing.JComboBox<ComboItem> jComboBoxVh;
    private com.toedter.calendar.JDateChooser jDateChooserChCobro;
    private com.toedter.calendar.JDateChooser jDateChooserChEmision;
    private com.toedter.calendar.JDateChooser jDateChooserContado;
    private com.toedter.calendar.JDateChooser jDateChooserEntrada;
    private com.toedter.calendar.JDateChooser jDateChooserSalida;
    private javax.swing.JFrame jFrameCheque;
    private javax.swing.JFrame jFrameContado;
    private javax.swing.JButton jFrameDeudaPlanilla;
    private javax.swing.JFrame jFrameEstadoPagos;
    private javax.swing.JFrame jFrameInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelChofer;
    private javax.swing.JLabel jLabelCliente;
    private javax.swing.JLabel jLabelFPatente;
    private javax.swing.JLabel jLabelFechaPl;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelIdCheque;
    private javax.swing.JLabel jLabelIdCheque1;
    private javax.swing.JLabel jLabelIdPago;
    private javax.swing.JLabel jLabelNombreApodo;
    private javax.swing.JLabel jLabelNumPlanilla;
    private javax.swing.JLabel jLabelVh;
    private javax.swing.JRadioButton jRadioButtonNuevoPago;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablePagos;
    private javax.swing.JTable jTableReparaciones;
    private javax.swing.JTextField jTextFieldACobrar;
    private javax.swing.JTextField jTextFieldCC;
    private javax.swing.JTextField jTextFieldDescripcion;
    private javax.swing.JTextField jTextFieldDueñoCliente;
    private javax.swing.JTextField jTextFieldFPatente;
    private javax.swing.JTextField jTextFieldFPersona;
    private javax.swing.JTextField jTextFieldImporteTotal;
    private javax.swing.JTextField jTextFieldMontoCheque;
    private javax.swing.JTextField jTextFieldMontoContado;
    private javax.swing.JTextField jTextFieldMontoPagado;
    private javax.swing.JTextField jTextFieldNCheque;
    // End of variables declaration//GEN-END:variables

    private int grabarCheque(Date chequeEmision, long monto, Date chequeCobro, String nCheque, boolean cobrado) {
        int idFdP = 0; // idforma_de_pago - La inicializo porque el IDE jode
        Connection co = this.controlador.obtenerConexion();
        try {  //  ... tipo_pago = {cheque, contado, CC}
            co.setAutoCommit(false); //Para poder hacer una transaccion
            PreparedStatement st = co.prepareStatement("INSERT INTO forma_de_pago values (default, ?, ?)",
                    Statement.RETURN_GENERATED_KEYS);
            //Using setObject(1,'Divorced',Types.OTHER)
            st.setObject(1, "cheque", Types.OTHER);
            st.setInt(2, Integer.valueOf(this.jLabelNumPlanilla.getText()));
            st.executeUpdate();
            try (ResultSet generatedKeys = st.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    idFdP = generatedKeys.getInt(1);
                }           // cheque en BdD: idcheque, fecha_emision, fecha_cobro, idforma_de_pago, monto, N°cheque
                PreparedStatement st2 = co.prepareStatement("INSERT INTO cheque values(default, ?, ?, ?, ?, ?, ?, ?)");
                
                st2.setDate(1, new java.sql.Date(chequeEmision.getTime())); //Igual que en Contable2
                if (chequeCobro != null) {
                    st2.setDate(2, new java.sql.Date(chequeCobro.getTime())); //Igual que en Contable2
                } else //Lo de abajo posiblemente tire exepción
                {
                    st2.setNull(2, java.sql.Types.DATE);
                }
                
                st2.setInt(3, idFdP); //El Id de forma de pago
                st2.setLong(4, monto);
                st2.setString(5, nCheque);
                st2.setBoolean(6, cobrado);
                st2.setBoolean(7, this.jCheckBoxNotificarCh.isSelected());
                st2.executeUpdate();
                // ----------
                co.commit(); //Confirma que las dos operaciones (st y st2) se efectuaron correctamente
            }
        } catch (SQLException ex) {
                JLabel label1 = new JLabelAriel("Error: "+ex.getMessage());
                JOptionPane.showMessageDialog(jFrameCheque, label1, "ERROR", JOptionPane.WARNING_MESSAGE);
            try {
                co.rollback(); //Algo fallo entonces hay que volver las 2 operaciones para atrás (st y st2)
            } catch (SQLException ex1) {
                JLabel label = new JLabelAriel("Error: "+ex1.getMessage());
                JOptionPane.showMessageDialog(jFrameCheque, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            }
            return idFdP = 0;
        } finally {
            if (co != null)
                ;// co.close();  //Me perjudica cuando trato de seguir usando 
        }
        return idFdP;
    }

    @Override
    public boolean sePuedeCerrar(){
        //Se puede agregar alguna otra comprobación
        boolean valor = false;
        JLabelAriel label = new JLabelAriel("La Planilla no fue guardada ¿Desea cerrarla igual?");
       
        if(estaGuardada()){ //La planilla esta guardada, osea que tiene los datos mínimos configurados
            valor = true;
            //Se puede cerrar porque está guardada
        }
        else{
            int rta = JOptionPane.showConfirmDialog(null, label, "ATENCIÓN", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(rta == JOptionPane.YES_OPTION)
                valor = true;
            else
                valor = false;    
        }
        return valor;
    }

    private int maxNumeroPlanilla() { //Retorna el mayor numero de planilla alojado en la Base de Datos
        String consulta = "select max(idplanilla) from planilla";
        int nuevoId = 0;
        try {
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while (rs.next()) {
                nuevoId = rs.getInt(1);
            }
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        return nuevoId;
    }

    private void paraIniciarPlanillaNueva() {
        this.jLabelNumPlanilla.setText(String.valueOf(maxNumeroPlanilla() + 1)); //Agrega el ID que corresponde a esta nueva planilla en el FRAME
        cargarCamiones(0); //El 0 significa que no hay id de Cliente
        this.jDateChooserEntrada.setDate(new Date()); //Fecha de Hoy por defecto
        agregarListenersJComboBox(); //Ahora el de Vehículos solamente
    }

    private void cargarCamiones(int idCliente) {
        String consulta;
        if (idCliente == 0) //No hay cliente seleccionado --> se muestran todos los camiones
        {
            consulta = "SELECT idvehiculo, marca, modelo, patente from vehiculo";
        } else { //Sino --> selecciono los camiones del cliente dado que hay idCliente
            consulta = "select idvehiculo, v.marca, v.modelo, v.patente from vehiculo as v inner join cliente as c "
                    + "on v.idduenio = c.idcliente where v.idduenio = '" + idCliente + "' ";
        }
        cargarVhBdD(consulta);
    }

    
    private void cargarVhBdD(String consulta){
        Connection co = this.controlador.obtenerConexion();
        String marca, modelo, patente;
        // En este método el ActionItemListener debería haber sido quitado
        this.jComboBoxVh.removeAllItems();
        ComboItem cmItem = new ComboItem("0", "<<Seleccione un Camión>>");
        this.jComboBoxVh.addItem(cmItem);
        ComboItem cmItem2 = new ComboItem("0", "--Ver Todos--");
        this.jComboBoxVh.addItem(cmItem2);
        try {
            Statement st = co.createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while (rs.next()) {
                String idVh = String.valueOf(rs.getInt(1));
                marca = rs.getString(2);
                modelo = rs.getString(3);
                patente = rs.getString(4);
                String marcaModelo = marca + " " + modelo;
                ComboItem comboItem = new ComboItem(idVh, marcaModelo + " " + patente); //(clave, valor)
                this.jComboBoxVh.addItem(comboItem);
                this.jComboBoxVh.updateUI();
                //Modificado en "code" --> "type" en parte de Diseño de Netbeans
                //Para obtener el valor por patente:
                /*Object item = comboBox.getSelectedItem();
                String value = ((ComboItem)item).getValue(); ó .getKey() según se prefiera*/
            }
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);
            //Acá iría la escritura de un log con fecha si es posible. También iría en otros lugares
        }
    }

    private int cargarCliente(String idvh) {
        String consulta = "";
        if (idvh.equals("")) //No hay idVh, se cargan todos los clientes
        {  //Cambiado el "0" por ""
            JLabel label = new JLabelAriel("Debe ingresar una patente ");
            JOptionPane.showMessageDialog(this, label, "INFO", JOptionPane.INFORMATION_MESSAGE); //this hace referencia al Frame
        } else //Hay una patente --> se carga el cliente específico de ese camión seleccionado
        {
            consulta = "SELECT c.idcliente, p.nombre, p.apellido FROM cliente AS c INNER JOIN persona AS p ON c.idpersona = p.idpersona"
                    + " INNER JOIN vehiculo AS v ON v.idduenio = c.idcliente WHERE v.idvehiculo = '" + idvh + "'";
        }

        return cargarClienteBdB(consulta);  //Retorna un entero que representa el id del cliente. O el número 0 sino se seleccionó camión
    }

    private int cargarClienteBdB(String consulta) {
     
        int idcli = 0;
        //Borro el Action Listeners para que no moleste en el agregado de Datos

        Connection co = this.controlador.obtenerConexion();
        try {
            Statement st = co.createStatement();
            ResultSet rs = st.executeQuery(consulta);
            //Si la patente es "0"

            while (rs.next()) {
                idcli = rs.getInt(1);
                nombre = rs.getString(2); //Nombre y apellido juntos son únicos
                apellido = rs.getString(3);
                this.idCliente = idcli; // Guardo el id para poder usarlo en el insert a la BdD
                this.jTextFieldDueñoCliente.setText(nombre + " " + apellido); //Asi tengo el id del cliente para cuando lo necesite
                //No se muesta el idcli y si se muestra nombre y apellido -- ver clase ComboItem y método toString();
            }
        } catch (SQLException ex) {
            //Acá iría la escritura de un log con fecha si es posible
        }
        return idcli;
    }

    private void agregarListenersJComboBox() {

        ItemListener vh = new ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxVhItemStateChanged(evt);
            }
        };

        this.jComboBoxVh.addItemListener(vh);
        this.itemListennerVh = vh;

        ItemListener persona = new ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPersonaItemStateChanged(evt);
            }
        };
        this.jComboBoxPersona.addItemListener(persona);
        this.itemListennerPersona = persona;

        /*   this.jComboBoxCli.addItemListener(new java.awt.event.ItemListener(){
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt){
                jComboBoxCliItemStateChanged(evt);
            }
        }); */
    }

    private void quitarActionListenersJComboBox() {
        // this.jComboBoxCli.removeItemListener(this.itemListennerCli);
        this.jComboBoxVh.removeItemListener(this.itemListennerVh);
        this.jComboBoxPersona.removeItemListener(this.itemListennerPersona);
    }

    /*
    private void filtrarPorPatente(String patenteFiltro){
        //Cargaría los camiones según el filtro por patente - Esta Incompleta
        String marca, modelo, patente;
        ComboItem combo;
        String consulta = "SELECT v.marca, v.modelo FROM vehiculo AS v WHERE v.patente LIKE '"+patenteFiltro+"' ";

        Connection co = this.controlador.obtenerConexion();        
        try {
            Statement st = co.createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while(rs.next()){
            
            }
        } catch (SQLException ex) {
            
        }
    
    }*/
    
    private void cargarTablaReparaciones(int numeroPlanilla) {
        //Método que se encarga de buscar y poner las reparaciones de una planilla en la tabla de Reparacioens
        String consulta = "select r.idreparacion, r.descripcion, r.importe, r.completada, r.tipo from reparacion AS r "
                + "where idplanilla = '" + numeroPlanilla + "'";
        Object registros[] = new Object[5];
        Connection co = this.controlador.obtenerConexion();
        try {
            Statement st = co.createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while (rs.next()) {
                registros[0] = ""+rs.getInt(1);
                registros[1] = rs.getString(2);
                registros[2] = rs.getString(5);
                registros[3] = rs.getLong(3);
                registros[4] = rs.getBoolean(4);
                this.tablaReparaciones.addRow(registros);
            }
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error en la carga de Reparaciones " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, " ERROR ", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void cargarPersonas(String idpersona) {
        //Crea la consulta correspondiente para completar el ComboBoxPersona. -1 Los choferes, 0 Todas las personas
        String consulta = "";
        if (idpersona.equals("-1")) //No hay persona seleccionada, se cargan todos las personas
        {
            consulta = "SELECT p.nombre, p.apellido, c.apodo, p.idpersona FROM persona AS p LEFT JOIN chofer AS c "
                    + "ON p.idpersona = c.idpersona ORDER BY p.nombre";
        }else if(idpersona.equals("0")){ //Se selecciona para cargar los choferes unicamente
            consulta = "SELECT p.nombre, p.apellido, c.apodo, p.idpersona FROM persona AS p inner JOIN chofer AS c "
                    + "ON p.idpersona = c.idpersona ORDER BY p.nombre";
        }
/*       
        consulta = "SELECT p.nombre, p.apellido, c.apodo, p.idpersona FROM persona AS p inner join planilla as pl on "
                + "pl.idpersona = p.idpersona inner join chofer as c on c.idpersona = p.idpersona "
                + "where pl.idplanilla = '"+idplanilla+"' ";
        */
        cargarPersonasBdD(consulta);
    }

    private void cargarPersonasBdD(String consulta) {
        //Quite la visibilidad del jComboBox de Persona (chofer) solamente pongo el nombre y apodo en un jLabelNombreApodo
        Connection co = this.controlador.obtenerConexion();
        this.jComboBoxPersona.removeAllItems();
        ComboItem cItem = new ComboItem("-1", "--Todas las Personas--");
        this.jComboBoxPersona.addItem(cItem);
        ComboItem cItem2 = new ComboItem("0", "--Todos los Choferes--");
        this.jComboBoxPersona.addItem(cItem2);
        try {
            Statement st = co.createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while (rs.next()) {
                this.nombre = rs.getString(1);
                this.apellido = rs.getString(2);
                String apo2 = rs.getString(3);
                if(apo2 == null)
                    this.apodo = "";
                else
                    this.apodo = rs.getString(3); //Tiene apodo
                int idpersona = rs.getInt(4);
                ComboItem comboItem = new ComboItem(String.valueOf(idpersona), this.nombre + " " + this.apellido + " " + this.apodo);
                this.jComboBoxPersona.addItem(comboItem);
            }
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error método cargarPersonasBdD: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, " ERROR ", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void cosasParaPlanillaAModificar(int numero) {
        //Carga los datos de la planilla a modificar. 'numero' es el número de planilla
        tablaReparaciones.setColumnIdentifiers(getColumnas());
        this.jButtonGuardar.setText("Actualizar");
        // Quito o modifico lo que es de acuerdo a Nueva Planilla
        this.jLabelFPatente.setText("");
        this.jTextFieldFPatente.setVisible(false);

        this.jComboBoxVh.setVisible(false);
        this.jButtonFVh.setVisible(false);
        this.jComboBoxPersona.setVisible(false);
        this.jTextFieldFPersona.setVisible(false);
        this.jButtonFPer.setVisible(false);
        //--

        //el numero representa número de planilla y sirve para buscar toda la informacion referida a la misma
        llenarCampos(numero);
        this.cargarImporte();
        cargarTablaPagos(numero);
        cargarTablaReparaciones(numero); //Cargo las reparaciones con el numero de planillas
        cargarPersonas("-1"); //Si es nueva planilla va un -1 que carga --> todas los choferes
        this.jLabelNombreApodo.setText(this.nombre+" "+this.apellido+" 'alias' "+this.apodo); //Sí o sí dsps de la anterior línea
        if (this.jComboBoxPersona.getItemCount() > 1) {
            this.jComboBoxPersona.setSelectedIndex(1);
        }
    }

    private void cargarImporte(){
        //Cargar el importe total de las reparaciones en un JTextField
        long montoPorReparaciones = this.montoPorReparaciones();
        //this.jTextFieldImporte.setText(""+montoPorReparaciones);
        Object registro[] = new Object[5];
        registro[1] = "IMPORTE TOTAL:";
        registro[3] = montoPorReparaciones;
        this.tablaReparaciones.addRow(registro);
    }
    
    @Override
    public void onFocus() {
        //Tendría que cargar datos que pudieron ser modificados antes del onFocus();
        //Por ahora ponemos que se carguen las reparaciones
        /*  this.jTableReparaciones.removeRowSelectionInterval(0, this.jTableReparaciones.getRowCount()-1); //Elimino todas las filas ...
               --NO ANDUVO LO DE ARRIBA  */
        DefaultTableModel dtm = (DefaultTableModel) this.jTableReparaciones.getModel();
        dtm.setRowCount(0);  //Magicamente anduvo y sirve para eliminar las filas de la tabla
        cargarImporte();
        this.cargarTablaReparaciones(Integer.valueOf(this.jLabelNumPlanilla.getText()));
        DefaultTableModel dtm2 = (DefaultTableModel) this.jTablePagos.getModel();
        dtm2.setRowCount(0);  //Magicamente anduvo y sirve para eliminar las filas de la tabla
        this.cargarTablaPagos(Integer.valueOf(this.jLabelNumPlanilla.getText()));
    }

    private void modificarCheque(int idCheque) {
        // Tenemos que obtener los datos y cargar la vista
        this.jCheckBoxChequeNuevo.setSelected(false);
        this.jCheckBoxChequeNuevo.setEnabled(false);
        this.jLabelIdCheque.setText(""+idCheque);
        //-----------
        String consulta = "SELECT * from cheque where cheque.idcheque = '"+idCheque+"' "; //Es lo que realmente aparece en la tabla
        try{
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(consulta);
            while(rs.next()){
                this.jDateChooserChCobro.setDate(rs.getDate(3));
                this.jDateChooserChEmision.setDate(rs.getDate(2));
    //    this.jTextFieldMontoCheque.setText(""+rs.getLong(5)); //Problemas porque es un RestrictedTextField -- queda vacío
                this.jTextFieldMontoCheque.setText(rs.getLong(5)+"");
      //          this.montoCheque = new RestrictedTextField(this.jTextFieldMontoCheque);
      //          this.montoCheque.setOnlyNums(true);        
                this.jTextFieldNCheque.setText(rs.getString(6));
                this.jCheckBoxChCobrado.setSelected(rs.getBoolean(7));
                this.jCheckBoxNotificarCh.setSelected(rs.getBoolean(8)); //El atributo "notificar"
            }
            this.jFrameCheque.setVisible(true);
            this.jButtonAgregarCheque.setText("Actualizar");
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, " ERROR ", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void modificarContado(int idPago) {
        //Falta completar
        //--------Creando la vista 
        this.jFrameContado.setVisible(true);
        this.jButtonAgregarContado.setText("Actualizar");
        //------------ DATOS PARA PODER ACTUALIZAR DESPUES---------------
        this.jRadioButtonNuevoPago.setSelected(false); //Porque es para modificar
        this.jRadioButtonNuevoPago.setVisible(false); //Para que se disimule
        this.jLabelIdPago.setText(""+idPago);
        this.jLabelId.setVisible(true);
        this.jLabelIdPago.setVisible(true);
        this.jRadioButtonNuevoPago.setSelected(false);  //Para que actualize y no agregue un nuevo pago
        this.jButtonAgregarContado.setText("Actualizar");
        JTextFieldDateEditor dateEditor =(JTextFieldDateEditor) this.jDateChooserContado.getDateEditor();
        dateEditor.setEditable(false);  //Para que no se puede ingresar manualmente la fecha
        //----------------------------------------------------
        // Acá iria la consulta para rellenar los 2 siguientes datos:
        cargarDatosContado(idPago);
       // this.montoContado = new RestrictedTextField(this.jTextFieldMontoContado);
       // this.montoContado.setOnlyNums(true);  //Hace que se borre el monto
    }

    private void cargarDatosContado(int idPago){
        
        String eee = "SELECT c.monto, c.fecha FROM contado as c WHERE c.idcontado = '"+idPago+"' ";
        try {
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(eee);
            while(rs.next()){
                long monto = rs.getLong(1);
                Date fecha = rs.getDate(2);
                this.jTextFieldMontoContado.setText(""+monto);
                this.jDateChooserContado.setDate(fecha);
            }  
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error en la carga de Datos " + ex.getMessage());
            JOptionPane.showMessageDialog(this.jFrameContado, label, " ERROR ", JOptionPane.WARNING_MESSAGE);
        }

    }

    private void actualizarChequeBdB(int idCheque, Date chequeCobro, String numeroCheque, long monto, Date chequeEmision, boolean cobrado) {
        //
        try {
            Connection co = this.controlador.obtenerConexion();
            PreparedStatement ps = co.prepareStatement("UPDATE cheque SET fecha_emision = ?, fecha_cobro = ?, monto = ?, "
                    + "numerocheque = ?, cobrado = ?, notificar = ? WHERE idcheque = ?");
            
            ps.setDate(1, new java.sql.Date(chequeEmision.getTime()));
            if (chequeCobro != null) {
                ps.setDate(2, new java.sql.Date(chequeCobro.getTime())); //Igual que en Contable2
            } else
            {
                ps.setNull(2, java.sql.Types.DATE); //Anda bien
            }
            ps.setLong(3, monto);
            ps.setString(4, numeroCheque);
            ps.setBoolean(5, cobrado);
            ps.setBoolean(6, this.jCheckBoxNotificarCh.isSelected());  //Atributo notificar
            ps.setInt(7, idCheque);
            ps.executeUpdate();
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error al actualizar el cheque: "+ex.getMessage());
            JOptionPane.showMessageDialog(this.jFrameCheque, label, "ERROR", JOptionPane.WARNING_MESSAGE);
        }
    }
}
