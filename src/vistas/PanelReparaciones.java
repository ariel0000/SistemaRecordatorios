/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controladores.ControladorPrincipal;
import java.awt.Font;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.ComboItem;
import modelo.JLabelAriel;

/**
 *
 * @author ari_0
 */
public class PanelReparaciones extends JPanelCustom {

    private ControladorPrincipal controlador;
    DefaultTableModel modelo;
    private ItemListener itemListenerVh;
    private ComboItem itemVhActual;
    
    public PanelReparaciones() {
        modeloTablas();
        initComponents();
        iniciarCosasEnComun();
        this.jTableVh.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 15));
    }

    public PanelReparaciones(int idReparacion, int idCamion, String tipo_rep){  //Constructor para mantenimiento
     //Constructor para una reparación existente. La notificación de mantención por hacer puede llamarse desde acá
        modeloTablas();
        initComponents();
        iniciarCosasEnComun();
        if(tipo_rep.equals("mantenimiento"))
            this.iniciarPerzonalizadoMantencion(idCamion);

        this.jTableVh.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 15));
        
    }
    
    private void modeloTablas(){
        //Método para preparar todo lo referido a las tablas
        modelo = new DefaultTableModel(null, getColumnas()){       
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
            return false;
            } 
        };
    }
    
    private String[] getColumnas() { 
        String columna[] = new String[]{"Marca y Modelo", "Descripción de Reparación", "completada", "tipo", "periodo (Meses)", "Fecha Terminado"};
        return columna;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupRep = new javax.swing.ButtonGroup();
        jFrameInfo = new javax.swing.JFrame();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel31 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabelFiltro = new javax.swing.JLabel();
        jButtonFiltrar = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        jTableVh = new javax.swing.JTable();
        jButtonPlanilla = new javax.swing.JButton();
        jRadioButtonReparacion = new javax.swing.JRadioButton();
        jRadioButtonMantenimiento = new javax.swing.JRadioButton();
        jComboBoxVh = new javax.swing.JComboBox<>();
        jTextFieldVh = new javax.swing.JTextField();
        jLabelFPatente = new javax.swing.JLabel();
        jButtonFiltrarVh = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jCheckBoxTipoRep = new javax.swing.JCheckBox();
        jCheckBoxVh = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        jButtonInfo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelVh = new javax.swing.JLabel();

        jFrameInfo.setAlwaysOnTop(true);
        jFrameInfo.setLocationByPlatform(true);
        jFrameInfo.setResizable(false);
        jFrameInfo.setSize(new java.awt.Dimension(840, 385));
        jFrameInfo.setType(java.awt.Window.Type.POPUP);

        jLabel24.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel24.setText("Esta vista permite ver las Reparaciones o Mantenciones de todos los Vehículos o de uno en particular");

        jLabel25.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel25.setText("  * Filtro por Vehículo - Con la posibilidad de buscar el Vh por Marca.");

        jLabel26.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel26.setText("Para filtrar las reparaciones se pueden usar 2 filtros:");

        jLabel27.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel27.setText("  * Filtro por tipo de reparación ");

        jLabel29.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 0, 51));
        jLabel29.setText("* Después de marcar o desmarcar los filtros \"cuadraditos\" haga \"click\" en el botón filtrar");

        jButton1.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox3.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jCheckBox3.setText("\"Filtro\"  - El fitro se activa cuando se marca");

        jLabel31.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel31.setText("la casilla cuadradita");

        jLabel30.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 0, 51));
        jLabel30.setText("* Botón de ver planilla para ver la planilla asociada a la reparación seleccionada");

        jLabel32.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 0, 51));
        jLabel32.setText("También puede abrir la planilla asociada a la reparación seleccionada:");

        javax.swing.GroupLayout jFrameInfoLayout = new javax.swing.GroupLayout(jFrameInfo.getContentPane());
        jFrameInfo.getContentPane().setLayout(jFrameInfoLayout);
        jFrameInfoLayout.setHorizontalGroup(
            jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameInfoLayout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jFrameInfoLayout.createSequentialGroup()
                        .addGroup(jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addGroup(jFrameInfoLayout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addGap(18, 18, 18)
                                .addGroup(jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox3)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameInfoLayout.createSequentialGroup()
                                        .addComponent(jLabel31)
                                        .addGap(115, 115, 115))))
                            .addComponent(jLabel27)
                            .addComponent(jLabel25)
                            .addComponent(jLabel32)
                            .addComponent(jLabel29))
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jFrameInfoLayout.setVerticalGroup(
            jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addGap(18, 18, 18)
                .addGroup(jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jCheckBox3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel31)
                .addGap(28, 28, 28)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel25)
                .addGap(18, 18, 18)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel30))
                .addGap(27, 27, 27))
        );

        jLabelFiltro.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelFiltro.setText("Filtros:");

        jButtonFiltrar.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonFiltrar.setText("Filtrar");
        jButtonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarActionPerformed(evt);
            }
        });

        jTableVh.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTableVh.setModel(modelo);
        jTableVh.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane.setViewportView(jTableVh);

        jButtonPlanilla.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonPlanilla.setText("Ver Planilla");
        jButtonPlanilla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlanillaActionPerformed(evt);
            }
        });

        buttonGroupRep.add(jRadioButtonReparacion);
        jRadioButtonReparacion.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jRadioButtonReparacion.setText("Reparación");

        buttonGroupRep.add(jRadioButtonMantenimiento);
        jRadioButtonMantenimiento.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jRadioButtonMantenimiento.setText("Mantenimiento");

        jComboBoxVh.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N

        jTextFieldVh.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        jLabelFPatente.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelFPatente.setText("Filtrar por Marca:");

        jButtonFiltrarVh.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButtonFiltrarVh.setText("Buscar");
        jButtonFiltrarVh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarVhActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jCheckBoxTipoRep.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jCheckBoxTipoRep.setText("Por Tipo de Rep.");

        jCheckBoxVh.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jCheckBoxVh.setText("Por Camión");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButtonInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/info-icon2.png"))); // NOI18N
        jButtonInfo.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/info-icon2.png"))); // NOI18N
        jButtonInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInfoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel1.setText("Camión seleccionado:");

        jLabelVh.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelVh.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelFiltro)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jCheckBoxVh)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxVh, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jCheckBoxTipoRep)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonReparacion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonMantenimiento))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelVh)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabelFPatente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldVh, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonFiltrarVh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonFiltrar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane)
                    .addComponent(jButtonPlanilla, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFiltrar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelFiltro)
                            .addComponent(jRadioButtonReparacion)
                            .addComponent(jRadioButtonMantenimiento)
                            .addComponent(jCheckBoxTipoRep))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxVh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldVh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelFPatente)
                            .addComponent(jButtonFiltrarVh)
                            .addComponent(jCheckBoxVh))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabelVh)))
                    .addComponent(jSeparator2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButtonPlanilla)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarCosasEnComun(){
        // Junta funcionalidad común a los diferentes contructores que pueda haber
        this.controlador = ControladorPrincipal.getInstancia();
        this.jTableVh.getColumnModel().getColumn(0).setMinWidth(220);
        this.jTableVh.getColumnModel().getColumn(1).setMinWidth(520);  //La descripción
        this.jTableVh.getColumnModel().getColumn(2).setMaxWidth(140);
        this.jTableVh.getColumnModel().getColumn(2).setMinWidth(95);
        this.jTableVh.getColumnModel().getColumn(3).setMinWidth(140);
        this.jTableVh.getColumnModel().getColumn(4).setMinWidth(130);
        this.jTableVh.getColumnModel().getColumn(5).setMinWidth(230);        
        //..
        String query = "SELECT v.marca, v.modelo, r.descripcion, r.completada, r.tipo, r.fecha_terminado, r.periodo FROM reparacion AS r "
                + " INNER JOIN planilla AS p ON p.idplanilla = r.idplanilla INNER JOIN vehiculo AS v ON v.idvehiculo = p.idvehiculo";
        this.cargarReparaciones(query);
        this.cargarVh("");
        this.jLabelVh.setVisible(false);  //No muestro el Label del Vh.
        this.agregarListenersJComboBox(); //Agrego el Listener para el ComboBox de Vh.
        //..
        this.jRadioButtonReparacion.setSelected(true);
        //..
    }
    
    private void iniciarPerzonalizadoMantencion(int idCamion){
        // Método que se llama desde un constructor especial para un vehículo específico y con mantención
        this.jCheckBoxVh.setSelected(true);
        this.jRadioButtonMantenimiento.setSelected(true);
        for(int i = 0; i < this.jComboBoxVh.getItemCount(); i++){
            if(this.jComboBoxVh.getItemAt(i).getKey().equals(""+idCamion)){
                this.jComboBoxVh.setSelectedIndex(i);
                break;
            }
        }
        String query = "SELECT v.marca, v.modelo, r.descripcion, r.completada, r.tipo, r.fecha_terminado, r.periodo FROM reparacion AS r "
                + " INNER JOIN planilla AS p ON p.idplanilla = r.idplanilla INNER JOIN vehiculo AS v ON v.idvehiculo = p.idvehiculo"
                + " WHERE p.idvehiculo = '"+idCamion+"' AND r.tipo = 'mantenimiento' ";
        this.cargarReparaciones(query);
    }
    
    private void jButtonInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInfoActionPerformed
        // Abre el Frame de JFrameInfo para mostrar info de la vista (Para que sirve para que no sirve).
        this.jFrameInfo.setVisible(true);
    }//GEN-LAST:event_jButtonInfoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.jFrameInfo.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonFiltrarVhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarVhActionPerformed
        // ActionPerformed de filtro de marca de Vh -- llama al método para cargar el Vh
        this.jComboBoxVh.removeAllItems();
        this.cargarVh(this.jTextFieldVh.getText());
    }//GEN-LAST:event_jButtonFiltrarVhActionPerformed

    private void jButtonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarActionPerformed
        //AP del botón Filtrar. Hay que comprobar cuales de los checkBox de filtros están activados
        filtrarReparaciones();
    }//GEN-LAST:event_jButtonFiltrarActionPerformed

    private void jButtonPlanillaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlanillaActionPerformed
        //AP de Ver Planilla
        int filaSeleccionada;
        filaSeleccionada = this.jTableVh.getSelectedRow();
        if(filaSeleccionada != -1){
          //  int nPlanilla =  //paso el número de planilla
          //  PanelPlanillaNueva p1 = new PanelPlanillaNueva(nPlanilla); //Acá va el número de planilla
         //   this.controlador.cambiarDePanel(p1, "Ver/Modificar Planilla");
        }
        else{
            JOptionPane.showMessageDialog(null, "Error: debe seleccionar una planilla ");
        }
    }//GEN-LAST:event_jButtonPlanillaActionPerformed

    public void filtrarReparaciones(){
        //Método que permite "usarse desde afuera" para filtrar las reparaciones o vehículos correspondientes
    String query = "SELECT v.marca, v.modelo, r.descripcion, r.completada, r.tipo, r.fecha_terminado, r.periodo FROM vehiculo AS v INNER JOIN planilla AS p "
                + "ON p.idvehiculo = v.idvehiculo INNER JOIN reparacion AS r ON r.idplanilla = p.idplanilla ";
        int i = 0;
        if(this.jCheckBoxTipoRep.isSelected()){
            query += " WHERE "+queryPorTipoRep();
            i = 1;
        }
        if(this.jCheckBoxVh.isSelected()){
            if(i == 1)  //Agrego un AND si ya pase por agregar el primer filtro
                query += " AND ";
            else
                query += " WHERE ";
            String queryPorCamión = queryPorCamión();
            query  = query.concat(queryPorCamión);
        }
        this.cargarReparaciones(query);
    };
    
    private String queryPorTipoRep(){
        //Método que crea una parte del query (Después del Where) para filtrar por tipo_rep
        String subQuery;
        if(this.jRadioButtonReparacion.isSelected())
            subQuery = "r.tipo = 'reparacion' ";
        else
            subQuery = "r.tipo = 'mantenimiento' ";
        return subQuery;
    }
    
    private String queryPorCamión(){
        //Método que crea una parte del query (Después del Where) para filtrar por tipo_rep
        int idVh = Integer.valueOf(((ComboItem) this.jComboBoxVh.getSelectedItem()).getKey());
        return " v.idvehiculo = '"+idVh+"' ";
    }
        
    private void cargarReparaciones(String query){
        //Carga las reparaciones segun el query pasado por parámetro
        //Descripción de Reparación", "completada", "tipo", "periodo", "Fecha Terminada
        DefaultTableModel dtm = (DefaultTableModel) this.jTableVh.getModel();
        dtm.setRowCount(0);  //Magicamente anduvo y sirve para eliminar las filas de la tabla
        Object datos[] = new String[6];
        datos[1] = "No";
        try {
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                datos[0] = rs.getString(1)+" "+rs.getString(2);  //Marca y modelo
                datos[1] = rs.getString(3);  //La descripción de la reparación
                if (rs.getBoolean(4)) //Completada
                    datos[2] = "Sí";
                else
                    datos[2] = "No";
               
                datos[3] = rs.getString(5);  //Tipo
                if (rs.getDate(6) == null)
                    datos[5] = "Sin Fecha";
                else
                    datos[5] = rs.getDate(6) + "";  // Fecha Terminado
 //Marca y Modelo", "Descripción de Reparación", "completada", "tipo", "periodo (Meses)", "Fecha Terminada"
                if(rs.getString(5).equals("reparacion"))
                    datos[4] = "-";  //No hay periódo para una reparación común
                else
                    datos[4] = "" + rs.getInt(7);  //Periodo
                this.modelo.addRow(datos);
                this.jTableVh.updateUI();
            }
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error al cargar Reparaciones en la Tabla: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.WARNING_MESSAGE);      
        }
    }

    private void cargarVh(String vhMarca){
        //Carga los Vehículos en el jComboBoxVh en formato ComboItem (idVh, marca-modelo-patente)
        String query = "SELECT v.idvehiculo, v.marca, v.modelo, v.patente FROM vehiculo AS v";
        String marca = vhMarca.toLowerCase();
        String modeloVh, patente;
        ComboItem cItem;
        this.jComboBoxVh.addItem(new ComboItem("0", "--Seleccione un Vehículo--"));
        int idVh;
        if(!vhMarca.equals(""))  //Si tengo marca --> cargo el|los vh que correspondan a la marca vhMarca
            query = "SELECT v.idvehiculo, v.marca, v.modelo, v.patente FROM vehiculo AS v "
                    + "WHERE lower(v.marca) LIKE '"+marca+"' ";
        Statement st;
        try {
            st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
                idVh = rs.getInt(1);
                marca = rs.getString(2);
                modeloVh = rs.getString(3);
                patente = rs.getString(4);
                cItem = new ComboItem(""+idVh, marca+" "+modeloVh+" "+" "+patente);
                this.jComboBoxVh.addItem(cItem);
            }
        } catch (SQLException ex) {
            JLabel label = new JLabelAriel("Error al cargar el|los Vehículos: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR!!", JOptionPane.WARNING_MESSAGE); 
        }
    }
    
    private void cargarLabel(String idVh, boolean valor){
        //Método para cargar el Label que identifica al camión seleccionado -- Se ejecutaría cuando selecciono un Vh en el jComboBox
        String query = "SELECT v.marca, v.modelo, v.modeloanio, v.patente FROM vehiculo AS v WHERE v.idvehiculo = '"+idVh+"' ";
        String marca, modeloVh, modeloAnio, patente;
        try{
            Statement st = this.controlador.obtenerConexion().createStatement();
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
                marca = rs.getString(1);
                modeloVh = rs.getString(2);
                modeloAnio = rs.getString(3);
                patente = rs.getString(4);
                this.jLabelVh.setText(marca+ " "+modeloVh+" "+modeloAnio+" Patente: "+patente);
                this.jLabelVh.setVisible(valor);
            }
        }catch(SQLException ex){
            JLabel label = new JLabelAriel("Error al cargar Label del Camión: "+ex.getMessage());
            JOptionPane.showMessageDialog(null, label, "ERROR!!", JOptionPane.WARNING_MESSAGE);    
        }
    }
    
    private void jComboBoxVhItemStateChanged(java.awt.event.ItemEvent e){
        //ActionListener propio -  se ejecuta siempre y cuando este agregado desde el método "agergarListenersJComboBox()"
        //Salta cuando se selecciona un Vh en el jComboBox
        ComboItem cItem = null;
        int filaSelect = this.jComboBoxVh.getSelectedIndex();  // -1 si no hay nada seleccionado
        if(filaSelect != -1 && filaSelect != 0){
            cItem = (ComboItem) this.jComboBoxVh.getSelectedItem();
            this.itemVhActual = cItem;
            this.cargarLabel(cItem.getKey(), true);  // - No lo muestro ('false') porque no quiero que se confunda con la info actual
        }
    }
    
    private void agregarListenersJComboBox() {
        //Agregar el Listener(método) al JComboBox de Vh
        ItemListener vh = new ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxVhItemStateChanged(evt);
            }
        };
        this.jComboBoxVh.addItemListener(vh);
        this.itemListenerVh = vh;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupRep;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonFiltrar;
    private javax.swing.JButton jButtonFiltrarVh;
    private javax.swing.JButton jButtonInfo;
    private javax.swing.JButton jButtonPlanilla;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBoxTipoRep;
    private javax.swing.JCheckBox jCheckBoxVh;
    private javax.swing.JComboBox<ComboItem> jComboBoxVh;
    private javax.swing.JFrame jFrameInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabelFPatente;
    private javax.swing.JLabel jLabelFiltro;
    private javax.swing.JLabel jLabelVh;
    private javax.swing.JRadioButton jRadioButtonMantenimiento;
    private javax.swing.JRadioButton jRadioButtonReparacion;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTableVh;
    private javax.swing.JTextField jTextFieldVh;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean sePuedeCerrar() {
        // falta completar los requerimientos para saber si se puede cerrar la vista y devolver true
        //Ver ejemplo en "Nueva Planilla"
        return true;
    }

    @Override
    public void onFocus() {
        //
    }
}
